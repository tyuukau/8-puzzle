
const ConfigurationBuilder = require("code-narrator/dist/src/documentation/plugins/builders/Configuration/ConfigurationBuilder");
const FilesBuilder = require("code-narrator/dist/src/documentation/plugins/builders/Files/FilesBuilder");
const FoldersBuilder = require("code-narrator/dist/src/documentation/plugins/builders/Folders/FoldersBuilder");
const UserDefinedBuilder = require("code-narrator/dist/src/documentation/plugins/builders/UserDefined/UserDefinedBuilder");

/**
 * You can find the documentation about code-narrator.config.js at
 * https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md
 *
 * @type {ICodeNarratorConfig}
 */
const config = {
      // App specific configuration files. This could be something like project_name.json
  config_files: [

  ],
  project_file: "main.py",
  entry_file: "main.py",
  cli_file: "",
  project_path: "./",
  source_path: "src",
  documentation_path: "./docs",
  test_path: "data",
  exclude: [
    "# Byte-compiled / optimized / DLL files",
    "__pycache__/",
    "*.py[cod]",
    "*$py.class",
    "# C extensions",
    "*.so",
    "# Distribution / packaging",
    ".Python",
    "build/",
    "develop-eggs/",
    "dist/",
    "downloads/",
    "eggs/",
    ".eggs/",
    "lib/",
    "lib64/",
    "parts/",
    "sdist/",
    "var/",
    "wheels/",
    "share/python-wheels/",
    "*.egg-info/",
    ".installed.cfg",
    "*.egg",
    "MANIFEST",
    "# PyInstaller",
    "#  Usually these files are written by a python script from a template",
    "#  before PyInstaller builds the exe, so as to inject date/other infos into it.",
    "*.manifest",
    "*.spec",
    "# Installer logs",
    "pip-log.txt",
    "pip-delete-this-directory.txt",
    "# Unit test / coverage reports",
    "htmlcov/",
    ".tox/",
    ".nox/",
    ".coverage",
    ".coverage.*",
    ".cache",
    "nosetests.xml",
    "coverage.xml",
    "*.cover",
    "*.py,cover",
    ".hypothesis/",
    ".pytest_cache/",
    "cover/",
    "# Translations",
    "*.mo",
    "*.pot",
    "# Django stuff:",
    "*.log",
    "local_settings.py",
    "db.sqlite3",
    "db.sqlite3-journal",
    "# Flask stuff:",
    "instance/",
    ".webassets-cache",
    "# Scrapy stuff:",
    ".scrapy",
    "# Sphinx documentation",
    "docs/_build/",
    "# PyBuilder",
    ".pybuilder/",
    "target/",
    "# Jupyter Notebook",
    ".ipynb_checkpoints",
    "# IPython",
    "profile_default/",
    "ipython_config.py",
    "# pyenv",
    "#   For a library or package, you might want to ignore these files since the code is",
    "#   intended to run in multiple environments; otherwise, check them in:",
    "# .python-version",
    "# pipenv",
    "#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.",
    "#   However, in case of collaboration, if having platform-specific dependencies or dependencies",
    "#   having no cross-platform support, pipenv may install dependencies that don't work, or not",
    "#   install all needed dependencies.",
    "#Pipfile.lock",
    "# poetry",
    "#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.",
    "#   This is especially recommended for binary packages to ensure reproducibility, and is more",
    "#   commonly ignored for libraries.",
    "#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control",
    "#poetry.lock",
    "# PEP 582; used by e.g. github.com/David-OConnor/pyflow",
    "__pypackages__/",
    "# Celery stuff",
    "celerybeat-schedule",
    "celerybeat.pid",
    "# SageMath parsed files",
    "*.sage.py",
    "# Environments",
    ".env",
    ".venv",
    "env/",
    "venv/",
    "ENV/",
    "env.bak/",
    "venv.bak/",
    "# Spyder project settings",
    ".spyderproject",
    ".spyproject",
    "# Rope project settings",
    ".ropeproject",
    "# mkdocs documentation",
    "/site",
    "# mypy",
    ".mypy_cache/",
    ".dmypy.json",
    "dmypy.json",
    "# Pyre type checker",
    ".pyre/",
    "# pytype static type analyzer",
    ".pytype/",
    "# Cython debug symbols",
    "cython_debug/",
    "# PyCharm",
    "#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can",
    "#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore",
    "#  and can be added to the global gitignore or merged into this file.  For a more nuclear",
    "#  option (not recommended) you can uncomment the following to ignore the entire idea folder.",
    "#.idea/",
    ".vscode/",
    "others/",
    "models/",
    "data/experiments/",
    "data/eda/",
    "data/input/fifteen-puzzle-6M.csv",
    "/node_modules",
    "/.idea",
    "/.git",
    ".gitignore",
    "/.code-narrator",
    "/dist",
    "/build",
    "package-lock.json",
  ],
  // Indicates if the documentation should create a README file in root of project
  readmeRoot: true,
  // Url to the repository, code-narrator tries to extract this from project file
  repository_url: "",
  // These are the plugins used when building documentation. You can create your own plugin. Checkout the code-narrator docs HowTo create a builder plugin
  builderPlugins: [
   ConfigurationBuilder,
   FilesBuilder,
   FoldersBuilder,
   UserDefinedBuilder,
  ],
  // These are system commends send to GPT with every query
  gptSystemCommands: [
    "Act as a documentation expert for software",
    "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly",
    "Return your answer in {DocumentationType} format",
    "If you notice any secret information, replace it with ***** in your response",
  ],
  documentation_type: "md",
  document_file_extension: ".md",
  folderRootFileName: "README",
  cache_file: ".code-narrator/cache.json",
  gptModel: "gpt-4",
  aiService: undefined,
  project_name: "",
  include: [
    "src/**/*",
  ],
  // Array of user defined documentations. See code-narrator How to create a user defined builder
  builders: [
    {
      name: "README",
      type: "README",
      template: "README",
      sidebarPosition: 1,
      args: {
        entryFileContent: "content(main.py)",
        aiService: undefined,
      },
      aiService: undefined,
    },
    {
      name: "HowTo Overview",
      type: "README",
      template: "overview_readme",
      path: "howto",
      files: [
        {
          path: "howto/*.md",
          aiService: undefined,
        },
      ],
      pages: [
        {
          name: "HowTo Example",
          type: "howto",
          template: "howto_create_howto",
          aiService: undefined,
        },
      ],
      aiService: undefined,
    },
  ],

}
module.exports = config;
