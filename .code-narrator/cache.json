[
	{
		"name": "__init__.py",
		"path": "src/__init__.py",
		"folderPath": "src",
		"fileContent": "from .game_config import *\r\nfrom .game import *\r\nfrom .heuristics import *\r\nfrom .node import *\r\nfrom .state import *\r\nfrom .algorithms import *\r\nfrom .eda import *\r\nfrom .ml import *\r\n",
		"documentation": "# __init__.py\n\n## Overview\n\nThe `__init__.py` file is a special file in Python, which is required to make Python treat the directories as containing packages. This file can be left empty but we generally put the import statements in it. This simplifies the import process when these packages are used in other scripts.\n\nIn this `__init__.py` file, we are importing several modules, which are presumably part of the same package. These modules include `game_config`, `game`, `heuristics`, `node`, `state`, `algorithms`, `eda`, and `ml`.\n\n## Modules\n\n### game_config\n\nThis module likely contains configuration settings for a game. This could include settings like the size of the game board, the number of players, or the starting state of the game.\n\n### game\n\nThis module likely contains the main logic for the game. This could include classes or functions for creating a new game, making moves, or checking if the game is over.\n\n### heuristics\n\nThis module likely contains heuristic functions. In the context of games, heuristics are often used to estimate the value or score of a game state, which can be used to guide search algorithms.\n\n### node\n\nThis module likely contains a class or classes for nodes. In the context of games, nodes are often used to represent game states in a game tree.\n\n### state\n\nThis module likely contains a class or classes for game states. A game state represents a specific configuration of the game at a particular point in time.\n\n### algorithms\n\nThis module likely contains various algorithms. In the context of games, these could be search algorithms, like depth-first search or breadth-first search, or game-playing algorithms, like minimax or alpha-beta pruning.\n\n### eda\n\nThis module likely contains functions for exploratory data analysis (EDA). EDA is an approach to analyzing data sets to summarize their main characteristics, often with visual methods.\n\n### ml\n\nThis module likely contains functions or classes related to machine learning. This could include classes for different types of models, functions for training or predicting, or utilities for preprocessing data.\n\n## Usage\n\nTo use any of these modules in your script, you can import them like this:\n\n```python\nfrom package_name import game_config\n```\n\nReplace `package_name` with the name of the package that contains this `__init__.py` file. You can then access any functions or classes in the `game_config` module like this:\n\n```python\ngame_config.some_function()\n```\n\nReplace `some_function` with the name of the function you want to call.",
		"isFolder": false,
		"updated": "2025-03-07T03:29:16.110Z",
		"sidebar_position": 0,
		"sidebar_label": "__init__.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"__init__.py\"\r\nThe file name is: __init__.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .game_config import *\r\nfrom .game import *\r\nfrom .heuristics import *\r\nfrom .node import *\r\nfrom .state import *\r\nfrom .algorithms import *\r\nfrom .eda import *\r\nfrom .ml import *\r\n\r\n###\r\n"
			}
		],
		"id": "src/__init__.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "game.py",
		"path": "src/game.py",
		"folderPath": "src",
		"fileContent": "import random\r\nfrom sys import exit\r\nimport time\r\nfrom dataclasses import dataclass\r\nimport signal\r\n\r\nfrom .algorithms.abstract_search import SearchResult\r\nfrom .game_config import GameConfig\r\nfrom .algorithms.abstract_search import SearchAlgorithm\r\nfrom .state import State\r\nfrom .node import Node\r\n\r\n\r\n@dataclass\r\nclass ResultRecord(object):\r\n    \"\"\"\r\n    Represents the result of a search algorithm.\r\n\r\n    Attributes:\r\n    - `path (list[Node])`: The path from the start node to the goal node, if found.\r\n    - `path_length (int)`: The length of the path from the start node to the goal node, if found.\r\n    - `time_cp (int)`: The time complexity of the search algorithm.\r\n    - `space_cp (int)`: The space complexity of the search algorithm.\r\n    - `time (float)`: The runtime of the search algorithm.\r\n    \"\"\"\r\n\r\n    path: list[Node] | None\r\n    path_length: int\r\n    time_cp: int\r\n    space_cp: int\r\n    time: float\r\n\r\n\r\nclass TimeoutError(Exception):\r\n    pass\r\n\r\n\r\ndef timeout_handler(signum, frame):\r\n    raise TimeoutError(\"Function timed out\")\r\n\r\n\r\nclass Game(object):\r\n    \"\"\"\r\n    Represents an instance of the n-puzzle game.\r\n\r\n    Attributes:\r\n    - `game_config` (`GameConfig`): The configuration of the game, including the start and goal states.\r\n    - `algorithm` (`SearchAlgorithm`): The search algorithm to use to solve the game.\r\n\r\n    Methods:\r\n    - `solve()`: Solves the given game configuration using the given algorithm.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"game_config\", \"algorithm\", \"ignore_solvability\"]\r\n\r\n    def __init__(\r\n        self,\r\n        game_config: GameConfig,\r\n        algorithm: SearchAlgorithm,\r\n        ignore_solvability: bool = True,\r\n    ) -> None:\r\n        self.game_config = game_config\r\n        self.algorithm = algorithm\r\n        self.ignore_solvability = ignore_solvability\r\n\r\n    def _play(self, do_print: bool = False) -> SearchResult:\r\n        start_state = self.game_config.start_state\r\n        goal_state = self.game_config.goal_state\r\n\r\n        if not self.ignore_solvability:\r\n            if not self.game_config.is_solvable():\r\n                exit(\"Solvability is False. Game terminated.\")\r\n\r\n        search_result = self.algorithm.solve(start_state, goal_state)\r\n        return search_result\r\n\r\n    def play(self, do_print: bool = False) -> ResultRecord:\r\n        start_time = time.time()\r\n\r\n        signal.signal(signal.SIGALRM, timeout_handler)\r\n        signal.alarm(60)\r\n\r\n        try:\r\n            search_result = self._play()\r\n        except TimeoutError:\r\n            search_result = None\r\n        finally:\r\n            signal.alarm(0)\r\n\r\n        end_time = time.time()\r\n        execution_time = end_time - start_time\r\n\r\n        path = search_result.path if search_result else None\r\n        path_length = len(search_result.path) - 1 if search_result else -1\r\n        time_cp = search_result.time_cp if search_result else -1\r\n        space_cp = search_result.space_cp if search_result else -1\r\n\r\n        if do_print:\r\n            if search_result:\r\n                search_result.print_result()\r\n            else:\r\n                print(\"Failed to solve on time.\")\r\n\r\n        return ResultRecord(path, path_length, time_cp, space_cp, execution_time)\r\n\r\n\r\ndef game_generator(n: int = 3) -> GameConfig:\r\n    \"\"\"\r\n    Generates a new game configuration for the 8-puzzle game.\r\n\r\n    Args:\r\n    - `n` (`int`): The size of the puzzle. Default is 3.\r\n\r\n    Returns:\r\n    - `GameConfig`: A new game configuration object containing the start and goal states.\r\n\r\n    Example:\r\n    ```\r\n    game_config = game_generator(n = 4)\r\n    ```\r\n    \"\"\"\r\n    try:\r\n        start = [i for i in range(n**2)]\r\n        goal = [i for i in range(n**2)]\r\n\r\n        random.shuffle(start)\r\n        random.shuffle(goal)\r\n\r\n        start_state = State(*start)\r\n        goal_state = State(*goal)\r\n\r\n        game_config = GameConfig(start_state=start_state, goal_state=goal_state)\r\n\r\n    except ValueError as e:\r\n        print(f\"An error occurred: {e}\")\r\n        return None\r\n\r\n    return game_config\r\n",
		"documentation": "# game.py\n\nThis Python file, `game.py`, is a code file that contains the implementation of a game, specifically a puzzle game. The game is designed to be solved using a search algorithm. The file contains several classes, methods, and functions that are used to define the game, its configuration, and the process of solving it.\n\n## Import Statements\n\nThe file begins with several import statements, importing necessary modules and classes for the game. These include `random`, `time`, `dataclasses`, `signal`, and several classes from the `algorithms` and `state` modules.\n\n## ResultRecord Class\n\nThe `ResultRecord` class is a data class that represents the result of a search algorithm. It has five attributes: `path`, `path_length`, `time_cp`, `space_cp`, and `time`.\n\n## TimeoutError Class\n\nThe `TimeoutError` class is a custom exception class that is raised when a function times out.\n\n## timeout_handler Function\n\nThe `timeout_handler` function is a helper function that raises a `TimeoutError` when called. It is used to handle timeouts in the game.\n\n## Game Class\n\nThe `Game` class represents an instance of the puzzle game. It has three attributes: `game_config`, `algorithm`, and `ignore_solvability`. The `game_config` attribute is an instance of the `GameConfig` class, which represents the configuration of the game. The `algorithm` attribute is an instance of the `SearchAlgorithm` class, which represents the search algorithm used to solve the game. The `ignore_solvability` attribute is a boolean that determines whether to ignore the solvability of the game.\n\nThe `Game` class has two methods: `_play` and `play`. The `_play` method is a private method that solves the game configuration using the given algorithm. The `play` method is a public method that starts the game, handles timeouts, and returns a `ResultRecord` object representing the result of the game.\n\n## game_generator Function\n\nThe `game_generator` function is a helper function that generates a new game configuration for the puzzle game. It takes an optional argument `n`, which is the size of the puzzle, and returns a `GameConfig` object.\n\n### Example Usage\n\n```python\n# Create a new game configuration\ngame_config = game_generator(n=4)\n\n# Create a new game instance with the game configuration and a search algorithm\ngame = Game(game_config=game_config, algorithm=SearchAlgorithm())\n\n# Play the game\nresult = game.play(do_print=True)\n```\n\nThis will create a new 4x4 puzzle game, solve it using the specified search algorithm, and print the result.",
		"isFolder": false,
		"updated": "2025-03-07T03:29:36.492Z",
		"sidebar_position": 1,
		"sidebar_label": "game.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"game.py\"\r\nThe file name is: game.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport random\r\nfrom sys import exit\r\nimport time\r\nfrom dataclasses import dataclass\r\nimport signal\r\n\r\nfrom .algorithms.abstract_search import SearchResult\r\nfrom .game_config import GameConfig\r\nfrom .algorithms.abstract_search import SearchAlgorithm\r\nfrom .state import State\r\nfrom .node import Node\r\n\r\n\r\n@dataclass\r\nclass ResultRecord(object):\r\n    \"\"\"\r\n    Represents the result of a search algorithm.\r\n\r\n    Attributes:\r\n    - `path (list[Node])`: The path from the start node to the goal node, if found.\r\n    - `path_length (int)`: The length of the path from the start node to the goal node, if found.\r\n    - `time_cp (int)`: The time complexity of the search algorithm.\r\n    - `space_cp (int)`: The space complexity of the search algorithm.\r\n    - `time (float)`: The runtime of the search algorithm.\r\n    \"\"\"\r\n\r\n    path: list[Node] | None\r\n    path_length: int\r\n    time_cp: int\r\n    space_cp: int\r\n    time: float\r\n\r\n\r\nclass TimeoutError(Exception):\r\n    pass\r\n\r\n\r\ndef timeout_handler(signum, frame):\r\n    raise TimeoutError(\"Function timed out\")\r\n\r\n\r\nclass Game(object):\r\n    \"\"\"\r\n    Represents an instance of the n-puzzle game.\r\n\r\n    Attributes:\r\n    - `game_config` (`GameConfig`): The configuration of the game, including the start and goal states.\r\n    - `algorithm` (`SearchAlgorithm`): The search algorithm to use to solve the game.\r\n\r\n    Methods:\r\n    - `solve()`: Solves the given game configuration using the given algorithm.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"game_config\", \"algorithm\", \"ignore_solvability\"]\r\n\r\n    def __init__(\r\n        self,\r\n        game_config: GameConfig,\r\n        algorithm: SearchAlgorithm,\r\n        ignore_solvability: bool = True,\r\n    ) -> None:\r\n        self.game_config = game_config\r\n        self.algorithm = algorithm\r\n        self.ignore_solvability = ignore_solvability\r\n\r\n    def _play(self, do_print: bool = False) -> SearchResult:\r\n        start_state = self.game_config.start_state\r\n        goal_state = self.game_config.goal_state\r\n\r\n        if not self.ignore_solvability:\r\n            if not self.game_config.is_solvable():\r\n                exit(\"Solvability is False. Game terminated.\")\r\n\r\n        search_result = self.algorithm.solve(start_state, goal_state)\r\n        return search_result\r\n\r\n    def play(self, do_print: bool = False) -> ResultRecord:\r\n        start_time = time.time()\r\n\r\n        signal.signal(signal.SIGALRM, timeout_handler)\r\n        signal.alarm(60)\r\n\r\n        try:\r\n            search_result = self._play()\r\n        except TimeoutError:\r\n            search_result = None\r\n        finally:\r\n            signal.alarm(0)\r\n\r\n        end_time = time.time()\r\n        execution_time = end_time - start_time\r\n\r\n        path = search_result.path if search_result else None\r\n        path_length = len(search_result.path) - 1 if search_result else -1\r\n        time_cp = search_result.time_cp if search_result else -1\r\n        space_cp = search_result.space_cp if search_result else -1\r\n\r\n        if do_print:\r\n            if search_result:\r\n                search_result.print_result()\r\n            else:\r\n                print(\"Failed to solve on time.\")\r\n\r\n        return ResultRecord(path, path_length, time_cp, space_cp, execution_time)\r\n\r\n\r\ndef game_generator(n: int = 3) -> GameConfig:\r\n    \"\"\"\r\n    Generates a new game configuration for the 8-puzzle game.\r\n\r\n    Args:\r\n    - `n` (`int`): The size of the puzzle. Default is 3.\r\n\r\n    Returns:\r\n    - `GameConfig`: A new game configuration object containing the start and goal states.\r\n\r\n    Example:\r\n    ```\r\n    game_config = game_generator(n = 4)\r\n    ```\r\n    \"\"\"\r\n    try:\r\n        start = [i for i in range(n**2)]\r\n        goal = [i for i in range(n**2)]\r\n\r\n        random.shuffle(start)\r\n        random.shuffle(goal)\r\n\r\n        start_state = State(*start)\r\n        goal_state = State(*goal)\r\n\r\n        game_config = GameConfig(start_state=start_state, goal_state=goal_state)\r\n\r\n    except ValueError as e:\r\n        print(f\"An error occurred: {e}\")\r\n        return None\r\n\r\n    return game_config\r\n\r\n###\r\n"
			}
		],
		"id": "src/game.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "game_config.py",
		"path": "src/game_config.py",
		"folderPath": "src",
		"fileContent": "from .state import State\r\n\r\n\r\nclass GameConfig(object):\r\n    \"\"\"\r\n    Stores game configuration.\r\n\r\n    Attributes:\r\n    - `width: int`): Width of the square puzzle grid.\r\n    - `start_state` (`State`): Initial state of the puzzle represented as a tuple of integers.\r\n    - `goal_state` (`State`): Goal state of the puzzle represented as a tuple of integers.\r\n    - `blank` (`int`): The value represented as blank in the grid, default is 0.\r\n    - `solvable` (`bool`): A boolean indicating if the puzzle is solvable. Calculated using `self._is_solvable()`.\r\n\r\n    Example:\r\n    ```\r\n    game_config = GameConfig(\r\n        start_state=State(3, 7, 4, 8, 5, 6, 2, 0, 1),\r\n        goal_state=State(0, 1, 2, 3, 4, 5, 6, 7, 8),\r\n    )\r\n    ```\r\n    \"\"\"\r\n\r\n    __slots__ = [\"width\", \"start_state\", \"goal_state\", \"solvable\"]\r\n\r\n    def __init__(\r\n        self,\r\n        start_state: State,\r\n        goal_state: State = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0),\r\n    ) -> None:\r\n        self.width = start_state.width\r\n        self.start_state = start_state\r\n        self.goal_state = goal_state\r\n        self._validate_data()\r\n\r\n    def __str__(self) -> str:\r\n        return f\"GameConfig(width={self.width}, start_state={self.start_state.array}, goal_state={self.goal_state.array}, solvable={self.solvable})\"\r\n\r\n    def _validate_data(self) -> None:\r\n        if not (\r\n            (self.width == self.start_state.width) and (self.width == self.goal_state.width)\r\n        ):\r\n            raise ValueError(\"The dimension of the start and goal states must be consistent\")\r\n\r\n    def _count_inversions(self, numbers: tuple[int]) -> int:\r\n        inversions = 0\r\n        for i in range(0, len(numbers)):\r\n            n = numbers[i]\r\n            if n <= 1:\r\n                continue\r\n            for j in range(i + 1, len(numbers)):\r\n                m = numbers[j]\r\n                if m > 0 and n > m:\r\n                    inversions += 1\r\n        return inversions\r\n\r\n    def is_solvable(self) -> bool:\r\n        start_inversions = self._count_inversions(self.start_state.array)\r\n        goal_inversions = self._count_inversions(self.goal_state.array)\r\n        if self.width % 2 == 0:\r\n            goal_zero_row_index = self.goal_state.array.index(0) // self.width\r\n            start_zero_row_index = self.start_state.array.index(0) // self.width\r\n            return (goal_inversions % 2) == (\r\n                (start_inversions + goal_zero_row_index + start_zero_row_index) % 2\r\n            )\r\n        else:\r\n            return (start_inversions % 2) == (goal_inversions % 2)\r\n",
		"documentation": "# game_config.py\n\nThis is a Python code file that defines a class `GameConfig` which is used to store the configuration of a game. The class has several attributes and methods that are used to manipulate and validate the game configuration.\n\n## Class: GameConfig\n\nThe `GameConfig` class is used to store the configuration of a game. It has the following attributes:\n\n- `width` (`int`): Width of the square puzzle grid.\n- `start_state` (`State`): Initial state of the puzzle represented as a tuple of integers.\n- `goal_state` (`State`): Goal state of the puzzle represented as a tuple of integers.\n- `solvable` (`bool`): A boolean indicating if the puzzle is solvable. Calculated using `self._is_solvable()`.\n\n### Example\n\n```python\ngame_config = GameConfig(\n    start_state=State(3, 7, 4, 8, 5, 6, 2, 0, 1),\n    goal_state=State(0, 1, 2, 3, 4, 5, 6, 7, 8),\n)\n```\n\n### Methods\n\n#### `__init__(self, start_state: State, goal_state: State) -> None`\n\nThis is the constructor method for the `GameConfig` class. It initializes the `width`, `start_state`, `goal_state` attributes and validates the data using the `_validate_data` method.\n\nParameters:\n\n- `start_state` (`State`): Initial state of the puzzle represented as a tuple of integers.\n- `goal_state` (`State`): Goal state of the puzzle represented as a tuple of integers.\n\n#### `__str__(self) -> str`\n\nThis method returns a string representation of the `GameConfig` object.\n\n#### `_validate_data(self) -> None`\n\nThis private method validates the data of the `GameConfig` object. It checks if the width of the start and goal states are consistent. If not, it raises a `ValueError`.\n\n#### `_count_inversions(self, numbers: tuple[int]) -> int`\n\nThis private method counts the number of inversions in a given tuple of numbers. An inversion is a pair of numbers where the number on the left is greater than the number on the right.\n\nParameters:\n\n- `numbers` (`tuple[int]`): A tuple of integers.\n\n#### `is_solvable(self) -> bool`\n\nThis method checks if the puzzle is solvable. It calculates the number of inversions in the start and goal states and uses this information to determine if the puzzle is solvable.\n\n## Technical Concepts\n\nThe concept of inversions is used in this code to determine if a puzzle is solvable. An inversion is a pair of numbers where the number on the left is greater than the number on the right. The number of inversions in a puzzle is used to determine if it is solvable. If the width of the puzzle is even, then the puzzle is solvable if the number of inversions in the start state plus the row index of the blank square is even. If the width of the puzzle is odd, then the puzzle is solvable if the number of inversions in the start state is even.",
		"isFolder": false,
		"updated": "2025-03-07T03:29:57.527Z",
		"sidebar_position": 2,
		"sidebar_label": "game_config.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"game_config.py\"\r\nThe file name is: game_config.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .state import State\r\n\r\n\r\nclass GameConfig(object):\r\n    \"\"\"\r\n    Stores game configuration.\r\n\r\n    Attributes:\r\n    - `width: int`): Width of the square puzzle grid.\r\n    - `start_state` (`State`): Initial state of the puzzle represented as a tuple of integers.\r\n    - `goal_state` (`State`): Goal state of the puzzle represented as a tuple of integers.\r\n    - `blank` (`int`): The value represented as blank in the grid, default is 0.\r\n    - `solvable` (`bool`): A boolean indicating if the puzzle is solvable. Calculated using `self._is_solvable()`.\r\n\r\n    Example:\r\n    ```\r\n    game_config = GameConfig(\r\n        start_state=State(3, 7, 4, 8, 5, 6, 2, 0, 1),\r\n        goal_state=State(0, 1, 2, 3, 4, 5, 6, 7, 8),\r\n    )\r\n    ```\r\n    \"\"\"\r\n\r\n    __slots__ = [\"width\", \"start_state\", \"goal_state\", \"solvable\"]\r\n\r\n    def __init__(\r\n        self,\r\n        start_state: State,\r\n        goal_state: State = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0),\r\n    ) -> None:\r\n        self.width = start_state.width\r\n        self.start_state = start_state\r\n        self.goal_state = goal_state\r\n        self._validate_data()\r\n\r\n    def __str__(self) -> str:\r\n        return f\"GameConfig(width={self.width}, start_state={self.start_state.array}, goal_state={self.goal_state.array}, solvable={self.solvable})\"\r\n\r\n    def _validate_data(self) -> None:\r\n        if not (\r\n            (self.width == self.start_state.width) and (self.width == self.goal_state.width)\r\n        ):\r\n            raise ValueError(\"The dimension of the start and goal states must be consistent\")\r\n\r\n    def _count_inversions(self, numbers: tuple[int]) -> int:\r\n        inversions = 0\r\n        for i in range(0, len(numbers)):\r\n            n = numbers[i]\r\n            if n <= 1:\r\n                continue\r\n            for j in range(i + 1, len(numbers)):\r\n                m = numbers[j]\r\n                if m > 0 and n > m:\r\n                    inversions += 1\r\n        return inversions\r\n\r\n    def is_solvable(self) -> bool:\r\n        start_inversions = self._count_inversions(self.start_state.array)\r\n        goal_inversions = self._count_inversions(self.goal_state.array)\r\n        if self.width % 2 == 0:\r\n            goal_zero_row_index = self.goal_state.array.index(0) // self.width\r\n            start_zero_row_index = self.start_state.array.index(0) // self.width\r\n            return (goal_inversions % 2) == (\r\n                (start_inversions + goal_zero_row_index + start_zero_row_index) % 2\r\n            )\r\n        else:\r\n            return (start_inversions % 2) == (goal_inversions % 2)\r\n\r\n###\r\n"
			}
		],
		"id": "src/game_config.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "heuristics.py",
		"path": "src/heuristics.py",
		"folderPath": "src",
		"fileContent": "from .state import State\r\n\r\nfrom .ml import get_model, infer\r\n\r\n\r\nclass CallableHeuristicClass:\r\n    ...\r\n\r\n\r\nclass MistileDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the Misplaced-tile distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The Misplaced-tile distance between the current state and the goal state.\r\n    \"\"\"\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        return sum(\r\n            c1 != c2 and c1 != 0 for c1, c2 in zip(current_state.array, goal_state.array)\r\n        )\r\n\r\n\r\nclass ManhattanDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the Manhattan distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The Manhattan distance between the current state and the goal state.\r\n    \"\"\"\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        goal_pos = goal_state.get_positions()\r\n\r\n        sum = 0\r\n        for cell, (current_i, current_j) in current_state.get_positions().items():\r\n            if cell != 0:\r\n                goal_i, goal_j = goal_pos[cell]\r\n                sum += abs(current_i - goal_i) + abs(current_j - goal_j)\r\n        return sum\r\n\r\n\r\nclass GaschnigDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the Gaschnig distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The Gaschnig distance between the current state and the goal state.\r\n\r\n    See here: https://cse-robotics.engr.tamu.edu/dshell/cs625/gaschnig-note.pdf.\r\n    \"\"\"\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        start = list(current_state.array)\r\n        goal = list(goal_state.array)\r\n        move = 0\r\n        while start != goal:\r\n            blank_index = start.index(0)\r\n            if goal[blank_index] != 0:\r\n                mismatch_index = start.index(goal[blank_index])\r\n                start[blank_index] = goal[blank_index]\r\n                start[mismatch_index] = 0\r\n                move += 1\r\n            else:  # blank in goal position\r\n                for i in range(len(start)):\r\n                    if start[i] != goal[i]:\r\n                        start[blank_index] = start[i]\r\n                        start[i] = 0\r\n                        move += 1\r\n                        break\r\n        return move\r\n\r\n\r\nclass AnnDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the ANN distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The ANN distance between the current state and the goal state.\r\n    \"\"\"\r\n\r\n    def __init__(self, model_path: str = \"data/models/puzzle_model.pth\") -> None:\r\n        self.model = get_model(model_path)\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        return infer(list(current_state.array), self.model)\r\n\r\n\r\nmistile_distance = MistileDistance()\r\nmanhattan_distance = ManhattanDistance()\r\ngaschnig_distance = GaschnigDistance()\r\nann_distance = AnnDistance()\r\n\r\n\r\ndef main():\r\n    a = State(15, 14, 8, 12, 10, 11, 9, 13, 2, 6, 5, 1, 3, 7, 4, 0)\r\n    b = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)\r\n    print(mistile_distance(a, b))\r\n    print(manhattan_distance(a, b))\r\n    print(gaschnig_distance(a, b))\r\n    print(ann_distance(a, b))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
		"documentation": "# heuristics.py\n\nThis Python file, `heuristics.py`, contains several classes and methods for calculating different types of distances between two states of a puzzle. These distances are used as heuristics in solving the puzzle. The file also includes a `main` function that demonstrates how to use these classes and methods.\n\n## Classes\n\n### CallableHeuristicClass\n\nThis is a base class for all the heuristic classes. It doesn't contain any methods or properties.\n\n### MistileDistance\n\nThis class calculates the Misplaced-tile distance between the current state and the goal state of the puzzle. It inherits from `CallableHeuristicClass`.\n\n#### Method: `__call__(self, current_state: State, goal_state: State) -> int`\n\nThis method calculates the Misplaced-tile distance. It takes two parameters:\n\n- `current_state` (`State`): The current state of the puzzle.\n- `goal_state` (`State`): The goal state of the puzzle.\n\nIt returns an integer representing the Misplaced-tile distance.\n\n### ManhattanDistance\n\nThis class calculates the Manhattan distance between the current state and the goal state of the puzzle. It inherits from `CallableHeuristicClass`.\n\n#### Method: `__call__(self, current_state: State, goal_state: State) -> int`\n\nThis method calculates the Manhattan distance. It takes two parameters:\n\n- `current_state` (`State`): The current state of the puzzle.\n- `goal_state` (`State`): The goal state of the puzzle.\n\nIt returns an integer representing the Manhattan distance.\n\n### GaschnigDistance\n\nThis class calculates the Gaschnig distance between the current state and the goal state of the puzzle. It inherits from `CallableHeuristicClass`.\n\n#### Method: `__call__(self, current_state: State, goal_state: State) -> int`\n\nThis method calculates the Gaschnig distance. It takes two parameters:\n\n- `current_state` (`State`): The current state of the puzzle.\n- `goal_state` (`State`): The goal state of the puzzle.\n\nIt returns an integer representing the Gaschnig distance.\n\n### AnnDistance\n\nThis class calculates the ANN distance between the current state and the goal state of the puzzle. It inherits from `CallableHeuristicClass`.\n\n#### Method: `__init__(self, model_path: str = \"data/models/puzzle_model.pth\") -> None`\n\nThis method initializes the `AnnDistance` class. It takes one optional parameter:\n\n- `model_path` (`str`): The path to the model file. The default value is \"data/models/puzzle_model.pth\".\n\n#### Method: `__call__(self, current_state: State, goal_state: State) -> int`\n\nThis method calculates the ANN distance. It takes two parameters:\n\n- `current_state` (`State`): The current state of the puzzle.\n- `goal_state` (`State`): The goal state of the puzzle.\n\nIt returns an integer representing the ANN distance.\n\n## Functions\n\n### main\n\nThis function demonstrates how to use the classes and methods in this file. It creates two `State` objects, `a` and `b`, and then calculates and prints the four types of distances between `a` and `b`.\n\n## Usage\n\nTo use this file, you can import the classes and use them to calculate distances. Here is an example:\n\n```python\nfrom heuristics import MistileDistance, ManhattanDistance, GaschnigDistance, AnnDistance, State\n\na = State(15, 14, 8, 12, 10, 11, 9, 13, 2, 6, 5, 1, 3, 7, 4, 0)\nb = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)\n\nmistile_distance = MistileDistance()\nprint(mistile_distance(a, b))\n\nmanhattan_distance = ManhattanDistance()\nprint(manhattan_distance(a, b))\n\ngaschnig_distance = GaschnigDistance()\nprint(gaschnig_distance(a, b))\n\nann_distance = AnnDistance()\nprint(ann_distance(a, b))\n```\n\nThis will print the four types of distances between `a` and `b`.",
		"isFolder": false,
		"updated": "2025-03-07T03:30:38.899Z",
		"sidebar_position": 3,
		"sidebar_label": "heuristics.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"heuristics.py\"\r\nThe file name is: heuristics.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .state import State\r\n\r\nfrom .ml import get_model, infer\r\n\r\n\r\nclass CallableHeuristicClass:\r\n    ...\r\n\r\n\r\nclass MistileDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the Misplaced-tile distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The Misplaced-tile distance between the current state and the goal state.\r\n    \"\"\"\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        return sum(\r\n            c1 != c2 and c1 != 0 for c1, c2 in zip(current_state.array, goal_state.array)\r\n        )\r\n\r\n\r\nclass ManhattanDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the Manhattan distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The Manhattan distance between the current state and the goal state.\r\n    \"\"\"\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        goal_pos = goal_state.get_positions()\r\n\r\n        sum = 0\r\n        for cell, (current_i, current_j) in current_state.get_positions().items():\r\n            if cell != 0:\r\n                goal_i, goal_j = goal_pos[cell]\r\n                sum += abs(current_i - goal_i) + abs(current_j - goal_j)\r\n        return sum\r\n\r\n\r\nclass GaschnigDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the Gaschnig distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The Gaschnig distance between the current state and the goal state.\r\n\r\n    See here: https://cse-robotics.engr.tamu.edu/dshell/cs625/gaschnig-note.pdf.\r\n    \"\"\"\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        start = list(current_state.array)\r\n        goal = list(goal_state.array)\r\n        move = 0\r\n        while start != goal:\r\n            blank_index = start.index(0)\r\n            if goal[blank_index] != 0:\r\n                mismatch_index = start.index(goal[blank_index])\r\n                start[blank_index] = goal[blank_index]\r\n                start[mismatch_index] = 0\r\n                move += 1\r\n            else:  # blank in goal position\r\n                for i in range(len(start)):\r\n                    if start[i] != goal[i]:\r\n                        start[blank_index] = start[i]\r\n                        start[i] = 0\r\n                        move += 1\r\n                        break\r\n        return move\r\n\r\n\r\nclass AnnDistance(CallableHeuristicClass):\r\n    \"\"\"\r\n    Calculates the ANN distance between the current state and the goal state.\r\n\r\n    Args:\r\n    - `current_state` (`State`): The current state of the puzzle.\r\n    - `goal_state` (`State`): The goal state of the puzzle.\r\n\r\n    Returns:\r\n    - `int`: The ANN distance between the current state and the goal state.\r\n    \"\"\"\r\n\r\n    def __init__(self, model_path: str = \"data/models/puzzle_model.pth\") -> None:\r\n        self.model = get_model(model_path)\r\n\r\n    def __call__(self, current_state: State, goal_state: State) -> int:\r\n        return infer(list(current_state.array), self.model)\r\n\r\n\r\nmistile_distance = MistileDistance()\r\nmanhattan_distance = ManhattanDistance()\r\ngaschnig_distance = GaschnigDistance()\r\nann_distance = AnnDistance()\r\n\r\n\r\ndef main():\r\n    a = State(15, 14, 8, 12, 10, 11, 9, 13, 2, 6, 5, 1, 3, 7, 4, 0)\r\n    b = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)\r\n    print(mistile_distance(a, b))\r\n    print(manhattan_distance(a, b))\r\n    print(gaschnig_distance(a, b))\r\n    print(ann_distance(a, b))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n###\r\n"
			}
		],
		"id": "src/heuristics.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "node.py",
		"path": "src/node.py",
		"folderPath": "src",
		"fileContent": "from typing import Self\r\nfrom collections.abc import Iterator\r\nfrom enum import Enum\r\n\r\nfrom .state import State\r\n\r\n\r\nclass Action(Enum):\r\n    UP = \"up\"\r\n    DOWN = \"down\"\r\n    LEFT = \"left\"\r\n    RIGHT = \"right\"\r\n\r\n\r\nclass Node(object):\r\n    \"\"\"\r\n    Represents a node in a search tree.\r\n\r\n    Attributes:\r\n    - `state` (`State`): The state of the node.\r\n    - `parent` (`Node`): The parent node of the node.\r\n    - `action` (`str`): The action taken to reach the node.\r\n    - `cost` (`int`): The cost of the path from the initial state to the node.\r\n\r\n    Methods:\r\n    - `expand() -> list[Node]`:\r\n        Returns a list of neighbors expanded from the node.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"state\", \"parent\", \"action\", \"cost\"]\r\n\r\n    def __init__(\r\n        self,\r\n        state: State,\r\n        parent: Self | None,\r\n        action: Action | None,\r\n        cost: int = 0,\r\n    ) -> None:\r\n        self.state = state\r\n        self.parent = parent\r\n        self.action = action\r\n        self.cost = cost\r\n\r\n    def __repr__(self) -> str:\r\n        if self.ư is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost})\"\r\n        else:\r\n            return (\r\n                f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost})\"\r\n            )\r\n\r\n    def __str__(self) -> str:\r\n        if self.parent is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost})\"\r\n        else:\r\n            return (\r\n                f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost})\"\r\n            )\r\n\r\n    def __eq__(self, other) -> bool:\r\n        if not isinstance(other, Node):\r\n            return False\r\n        return (\r\n            self.state == other.state\r\n            and self.parent == other.parent\r\n            and self.action == other.action\r\n            and self.cost == other.cost\r\n        )\r\n\r\n    def __lt__(self, other) -> bool:\r\n        return self.cost < other.cost\r\n\r\n    def __hash__(self) -> int:\r\n        return hash((self.state, self.parent, self.action, self.cost))\r\n\r\n    def expand(self) -> Iterator[Self]:\r\n        i_old, j_old = self.state.get_blank_tile()\r\n        action_dict = [\r\n            (i_old - 1, j_old, Action.UP),\r\n            (i_old + 1, j_old, Action.DOWN),\r\n            (i_old, j_old - 1, Action.LEFT),\r\n            (i_old, j_old + 1, Action.RIGHT),\r\n        ]\r\n        for i_new, j_new, action in action_dict:\r\n            try:\r\n                new_state = self.state.swap(i_old, j_old, i_new, j_new)\r\n                yield Node(state=new_state, parent=self, action=action, cost=self.cost + 1)\r\n            except AssertionError:\r\n                continue\r\n\r\n\r\nclass PNode(Node):\r\n    \"\"\"\r\n    Represents a node in a search tree.\r\n\r\n    Attributes:\r\n    - `state` (`State`): The state of the node.\r\n    - `parent` (`Node`): The parent node of the node.\r\n    - `action` (`str`): The action taken to reach the node.\r\n    - `cost` (`int`): The cost of the path from the initial state to the node.\r\n    - `f_cost` (`int`): The f-cost of the node.\r\n\r\n    Methods:\r\n    - `expand() -> Iterator[Node]`:\r\n        Returns a list of neighbors expanded from the node.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"f_cost\"]\r\n\r\n    def __init__(\r\n        self,\r\n        state: State,\r\n        parent: Self | None,\r\n        action: Action | None,\r\n        cost: int = 0,\r\n        f_cost: int = 0,\r\n    ) -> None:\r\n        super().__init__(state, parent, action, cost)\r\n        self.f_cost = f_cost\r\n\r\n    def __repr__(self) -> str:\r\n        if self.parent is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n        else:\r\n            return f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n\r\n    def __str__(self) -> str:\r\n        if self.parent is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n        else:\r\n            return f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n\r\n    def __eq__(self, other) -> bool:\r\n        if not isinstance(other, PNode):\r\n            return False\r\n        return (\r\n            self.state == other.state\r\n            and self.parent == other.parent\r\n            and self.action == other.action\r\n            and self.cost == other.cost\r\n            and self.f_cost == self.f_cost\r\n        )\r\n\r\n    def __lt__(self, other) -> bool:\r\n        if self.f_cost < other.f_cost:\r\n            return True\r\n        elif self.f_cost == other.f_cost:\r\n            if self.cost > other.cost:\r\n                return True\r\n        return False\r\n\r\n    def __hash__(self) -> int:\r\n        return hash((self.state, self.parent, self.action, self.cost, self.f_cost))\r\n\r\n    def expand(self) -> Iterator[Self]:\r\n        i_old, j_old = self.state.get_blank_tile()\r\n        action_dict = [\r\n            (i_old - 1, j_old, Action.UP),\r\n            (i_old + 1, j_old, Action.DOWN),\r\n            (i_old, j_old - 1, Action.LEFT),\r\n            (i_old, j_old + 1, Action.RIGHT),\r\n        ]\r\n        for i_new, j_new, action in action_dict:\r\n            try:\r\n                new_state = self.state.swap(i_old, j_old, i_new, j_new)\r\n                yield PNode(state=new_state, parent=self, action=action, cost=self.cost + 1)\r\n            except AssertionError:\r\n                continue\r\n",
		"documentation": "# node.py\n\nThis Python file defines two classes, `Node` and `PNode`, which represent nodes in a search tree. These nodes are used in search algorithms, such as A* and BFS, to represent the state of a problem at a given point, the action taken to reach this state, the cost of the path from the initial state to this state, and the parent node that this state was expanded from.\n\n## Class: Node\n\nThe `Node` class is a basic representation of a node in a search tree. It has four attributes: `state`, `parent`, `action`, and `cost`.\n\n### Attributes\n\n- `state` (`State`): The state of the node. This is an instance of the `State` class, which represents the state of the problem that this node represents.\n- `parent` (`Node`): The parent node of this node. This is the node from which this node was expanded.\n- `action` (`Action`): The action taken to reach this node from its parent node. This is an instance of the `Action` enum, which can be `UP`, `DOWN`, `LEFT`, or `RIGHT`.\n- `cost` (`int`): The cost of the path from the initial state to this node. This is the sum of the costs of the actions taken to reach this node from the initial state.\n\n### Methods\n\n- `expand() -> list[Node]`: This method returns a list of nodes that can be reached from this node by taking one action. It does this by iterating over all possible actions, applying each action to the current state to get a new state, and creating a new node for each reachable state.\n\n## Class: PNode\n\nThe `PNode` class is a subclass of `Node` that adds an additional attribute, `f_cost`. This class is used in search algorithms that use a heuristic function to estimate the cost of the path from the initial state to the goal state.\n\n### Attributes\n\n- `f_cost` (`int`): The f-cost of the node. This is the sum of the cost of the path from the initial state to this node and the heuristic estimate of the cost of the path from this node to the goal state.\n\n### Methods\n\n- `expand() -> list[PNode]`: This method works in the same way as the `expand` method of the `Node` class, but it returns a list of `PNode` instances instead of `Node` instances.\n\n## Enum: Action\n\nThe `Action` enum represents the actions that can be taken to move from one state to another. It has four values: `UP`, `DOWN`, `LEFT`, and `RIGHT`.\n\n## Usage\n\nHere is an example of how to use these classes:\n\n```python\nfrom node import Node, Action, State\n\n# Create an initial state\ninitial_state = State()\n\n# Create the initial node\ninitial_node = Node(state=initial_state, parent=None, action=None, cost=0)\n\n# Expand the initial node\nneighbors = initial_node.expand()\n\n# Print the state of each neighbor\nfor neighbor in neighbors:\n    print(neighbor.state)\n```\n\nThis will print the state of each node that can be reached from the initial state by taking one action.",
		"isFolder": false,
		"updated": "2025-03-07T03:31:03.522Z",
		"sidebar_position": 4,
		"sidebar_label": "node.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"node.py\"\r\nThe file name is: node.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom typing import Self\r\nfrom collections.abc import Iterator\r\nfrom enum import Enum\r\n\r\nfrom .state import State\r\n\r\n\r\nclass Action(Enum):\r\n    UP = \"up\"\r\n    DOWN = \"down\"\r\n    LEFT = \"left\"\r\n    RIGHT = \"right\"\r\n\r\n\r\nclass Node(object):\r\n    \"\"\"\r\n    Represents a node in a search tree.\r\n\r\n    Attributes:\r\n    - `state` (`State`): The state of the node.\r\n    - `parent` (`Node`): The parent node of the node.\r\n    - `action` (`str`): The action taken to reach the node.\r\n    - `cost` (`int`): The cost of the path from the initial state to the node.\r\n\r\n    Methods:\r\n    - `expand() -> list[Node]`:\r\n        Returns a list of neighbors expanded from the node.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"state\", \"parent\", \"action\", \"cost\"]\r\n\r\n    def __init__(\r\n        self,\r\n        state: State,\r\n        parent: Self | None,\r\n        action: Action | None,\r\n        cost: int = 0,\r\n    ) -> None:\r\n        self.state = state\r\n        self.parent = parent\r\n        self.action = action\r\n        self.cost = cost\r\n\r\n    def __repr__(self) -> str:\r\n        if self.ư is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost})\"\r\n        else:\r\n            return (\r\n                f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost})\"\r\n            )\r\n\r\n    def __str__(self) -> str:\r\n        if self.parent is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost})\"\r\n        else:\r\n            return (\r\n                f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost})\"\r\n            )\r\n\r\n    def __eq__(self, other) -> bool:\r\n        if not isinstance(other, Node):\r\n            return False\r\n        return (\r\n            self.state == other.state\r\n            and self.parent == other.parent\r\n            and self.action == other.action\r\n            and self.cost == other.cost\r\n        )\r\n\r\n    def __lt__(self, other) -> bool:\r\n        return self.cost < other.cost\r\n\r\n    def __hash__(self) -> int:\r\n        return hash((self.state, self.parent, self.action, self.cost))\r\n\r\n    def expand(self) -> Iterator[Self]:\r\n        i_old, j_old = self.state.get_blank_tile()\r\n        action_dict = [\r\n            (i_old - 1, j_old, Action.UP),\r\n            (i_old + 1, j_old, Action.DOWN),\r\n            (i_old, j_old - 1, Action.LEFT),\r\n            (i_old, j_old + 1, Action.RIGHT),\r\n        ]\r\n        for i_new, j_new, action in action_dict:\r\n            try:\r\n                new_state = self.state.swap(i_old, j_old, i_new, j_new)\r\n                yield Node(state=new_state, parent=self, action=action, cost=self.cost + 1)\r\n            except AssertionError:\r\n                continue\r\n\r\n\r\nclass PNode(Node):\r\n    \"\"\"\r\n    Represents a node in a search tree.\r\n\r\n    Attributes:\r\n    - `state` (`State`): The state of the node.\r\n    - `parent` (`Node`): The parent node of the node.\r\n    - `action` (`str`): The action taken to reach the node.\r\n    - `cost` (`int`): The cost of the path from the initial state to the node.\r\n    - `f_cost` (`int`): The f-cost of the node.\r\n\r\n    Methods:\r\n    - `expand() -> Iterator[Node]`:\r\n        Returns a list of neighbors expanded from the node.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"f_cost\"]\r\n\r\n    def __init__(\r\n        self,\r\n        state: State,\r\n        parent: Self | None,\r\n        action: Action | None,\r\n        cost: int = 0,\r\n        f_cost: int = 0,\r\n    ) -> None:\r\n        super().__init__(state, parent, action, cost)\r\n        self.f_cost = f_cost\r\n\r\n    def __repr__(self) -> str:\r\n        if self.parent is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n        else:\r\n            return f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n\r\n    def __str__(self) -> str:\r\n        if self.parent is not None:\r\n            return f\"Node(state={self.state}, parent.state={self.parent.state}, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n        else:\r\n            return f\"Node(state={self.state}, parent=None, action={self.action}, cost={self.cost}, path={self.f_cost})\"\r\n\r\n    def __eq__(self, other) -> bool:\r\n        if not isinstance(other, PNode):\r\n            return False\r\n        return (\r\n            self.state == other.state\r\n            and self.parent == other.parent\r\n            and self.action == other.action\r\n            and self.cost == other.cost\r\n            and self.f_cost == self.f_cost\r\n        )\r\n\r\n    def __lt__(self, other) -> bool:\r\n        if self.f_cost < other.f_cost:\r\n            return True\r\n        elif self.f_cost == other.f_cost:\r\n            if self.cost > other.cost:\r\n                return True\r\n        return False\r\n\r\n    def __hash__(self) -> int:\r\n        return hash((self.state, self.parent, self.action, self.cost, self.f_cost))\r\n\r\n    def expand(self) -> Iterator[Self]:\r\n        i_old, j_old = self.state.get_blank_tile()\r\n        action_dict = [\r\n            (i_old - 1, j_old, Action.UP),\r\n            (i_old + 1, j_old, Action.DOWN),\r\n            (i_old, j_old - 1, Action.LEFT),\r\n            (i_old, j_old + 1, Action.RIGHT),\r\n        ]\r\n        for i_new, j_new, action in action_dict:\r\n            try:\r\n                new_state = self.state.swap(i_old, j_old, i_new, j_new)\r\n                yield PNode(state=new_state, parent=self, action=action, cost=self.cost + 1)\r\n            except AssertionError:\r\n                continue\r\n\r\n###\r\n"
			}
		],
		"id": "src/node.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "state.py",
		"path": "src/state.py",
		"folderPath": "src",
		"fileContent": "from typing import Self\r\nimport math\r\n\r\n\r\nclass State(object):\r\n    \"\"\"\r\n    Represents a state of the 8-puzzle game.\r\n\r\n    Attributes:\r\n    - `width (int)`: The width of the puzzle board.\r\n    - `array (tuple[int])`: The flattened representation of the puzzle board.\r\n    - `blank (int)`: The index of the blank tile (0) in the puzzle board.\r\n\r\n    Methods:\r\n    - `swap(self, i_old: int, j_old: int, i_new: int, j_new: int) -> State`:\r\n        Swaps the positions of two tiles in the puzzle board and returns a new State object.\r\n    - `get_blank_tile(self) -> tuple[int, int]`:\r\n        Returns the (row, col) tuple of the blank tile in the puzzle board.\r\n    - `get_positions(self) -> dict[int, tuple[int, int]]`:\r\n        Returns a dictionary (tile, position) in the puzzle board.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"width\", \"array\", \"blank\"]\r\n\r\n    def __init__(self, *args: int) -> None:\r\n        self.array = args\r\n        self.blank = 0\r\n        self.width = math.isqrt(len(args))\r\n        self._validate_data()\r\n\r\n    def __repr__(self) -> str:\r\n        return f\"State{self.array}\"\r\n\r\n    def __str__(self) -> str:\r\n        return f\"State{self.array}\"\r\n\r\n    def __eq__(self, other) -> bool:\r\n        return self.array == other.array\r\n\r\n    def __hash__(self) -> int:\r\n        return hash(self.array)\r\n\r\n    def _validate_data(self) -> None:\r\n        if len(set(self.array)) != len(self.array):\r\n            raise ValueError(\"Each number may only appears once\")\r\n\r\n        if len(self.array) != self.width**2:\r\n            raise ValueError(\"The length of the array must be width squared\")\r\n\r\n        if any(m < 0 or m > self.width**2 - 1 for m in self.array):\r\n            raise ValueError(\"All numbers in a state must be >= 0 and <= width*width-1\")\r\n\r\n    def _idx_to_pos(self, idx: int) -> tuple[int, int]:\r\n        return idx // self.width, idx % self.width\r\n\r\n    def _val_to_idx(self, i: int, j: int) -> int:\r\n        return i * self.width + j\r\n\r\n    def swap(self, i_old: int, j_old: int, i_new: int, j_new: int) -> Self:\r\n        assert 0 <= i_new < self.width and 0 <= j_new < self.width\r\n        array_new = list(self.array)\r\n\r\n        old_idx = self._val_to_idx(i_old, j_old)\r\n        new_idx = self._val_to_idx(i_new, j_new)\r\n\r\n        array_new[old_idx], array_new[new_idx] = array_new[new_idx], array_new[old_idx]\r\n        return State(*array_new)\r\n\r\n    def get_blank_tile(self) -> tuple[int, int]:\r\n        for idx, cell in enumerate(self.array):\r\n            if cell == self.blank:\r\n                return self._idx_to_pos(idx)\r\n\r\n    def get_positions(self) -> dict[int, tuple[int, int]]:\r\n        return {val: self._idx_to_pos(idx) for idx, val in enumerate(self.array) if val != 0}\r\n",
		"documentation": "# state.py\n\n## Overview\nThe `state.py` file contains a single class, `State`, which represents a state of the 8-puzzle game. The 8-puzzle game is a sliding puzzle that consists of a frame of numbered square tiles in random order with one tile missing. The object of the puzzle is to place the tiles in order by making sliding moves that use the empty space.\n\n## Class: State\n\n### Description\nThe `State` class represents a state of the 8-puzzle game. It includes attributes to represent the width of the puzzle board, the flattened representation of the puzzle board, and the index of the blank tile in the puzzle board. It also includes methods to swap the positions of two tiles, get the position of the blank tile, and get the positions of all tiles.\n\n### Attributes\n- `width (int)`: The width of the puzzle board.\n- `array (tuple[int])`: The flattened representation of the puzzle board.\n- `blank (int)`: The index of the blank tile (0) in the puzzle board.\n\n### Methods\n\n#### `swap(self, i_old: int, j_old: int, i_new: int, j_new: int) -> State`\nSwaps the positions of two tiles in the puzzle board and returns a new `State` object. The parameters are:\n- `i_old, j_old`: The row and column indices of the tile to be moved.\n- `i_new, j_new`: The row and column indices of the new position for the tile.\n\n#### `get_blank_tile(self) -> tuple[int, int]`\nReturns the (row, col) tuple of the blank tile in the puzzle board.\n\n#### `get_positions(self) -> dict[int, tuple[int, int]]`\nReturns a dictionary (tile, position) in the puzzle board.\n\n### Example Usage\n```python\n# Create a new state\nstate = State(1, 2, 3, 4, 5, 6, 7, 8, 0)\n\n# Swap the positions of two tiles\nnew_state = state.swap(2, 2, 2, 1)\n\n# Get the position of the blank tile\nblank_tile_position = state.get_blank_tile()\n\n# Get the positions of all tiles\npositions = state.get_positions()\n```\n\n### Technical Concepts\nThe `State` class uses the concept of a flattened representation of the puzzle board. This means that the 2D puzzle board is represented as a 1D tuple of integers. The position of a tile in the tuple corresponds to its position on the puzzle board. The blank tile is represented by the number 0.\n\nThe class also uses the concept of a width, which is the number of tiles in one row or column of the puzzle board. The width is calculated as the square root of the length of the array attribute.\n\nThe class uses the `math.isqrt` function to calculate the width. This function returns the integer square root of a number. For example, `math.isqrt(9)` returns `3`.\n\nThe class uses the `__slots__` mechanism to improve memory efficiency. The `__slots__` attribute is a list that contains the names of the attributes of the class. By defining `__slots__`, Python will not create a dictionary for each instance of the class, which saves memory.",
		"isFolder": false,
		"updated": "2025-03-07T03:31:29.723Z",
		"sidebar_position": 5,
		"sidebar_label": "state.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"state.py\"\r\nThe file name is: state.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom typing import Self\r\nimport math\r\n\r\n\r\nclass State(object):\r\n    \"\"\"\r\n    Represents a state of the 8-puzzle game.\r\n\r\n    Attributes:\r\n    - `width (int)`: The width of the puzzle board.\r\n    - `array (tuple[int])`: The flattened representation of the puzzle board.\r\n    - `blank (int)`: The index of the blank tile (0) in the puzzle board.\r\n\r\n    Methods:\r\n    - `swap(self, i_old: int, j_old: int, i_new: int, j_new: int) -> State`:\r\n        Swaps the positions of two tiles in the puzzle board and returns a new State object.\r\n    - `get_blank_tile(self) -> tuple[int, int]`:\r\n        Returns the (row, col) tuple of the blank tile in the puzzle board.\r\n    - `get_positions(self) -> dict[int, tuple[int, int]]`:\r\n        Returns a dictionary (tile, position) in the puzzle board.\r\n    \"\"\"\r\n\r\n    __slots__ = [\"width\", \"array\", \"blank\"]\r\n\r\n    def __init__(self, *args: int) -> None:\r\n        self.array = args\r\n        self.blank = 0\r\n        self.width = math.isqrt(len(args))\r\n        self._validate_data()\r\n\r\n    def __repr__(self) -> str:\r\n        return f\"State{self.array}\"\r\n\r\n    def __str__(self) -> str:\r\n        return f\"State{self.array}\"\r\n\r\n    def __eq__(self, other) -> bool:\r\n        return self.array == other.array\r\n\r\n    def __hash__(self) -> int:\r\n        return hash(self.array)\r\n\r\n    def _validate_data(self) -> None:\r\n        if len(set(self.array)) != len(self.array):\r\n            raise ValueError(\"Each number may only appears once\")\r\n\r\n        if len(self.array) != self.width**2:\r\n            raise ValueError(\"The length of the array must be width squared\")\r\n\r\n        if any(m < 0 or m > self.width**2 - 1 for m in self.array):\r\n            raise ValueError(\"All numbers in a state must be >= 0 and <= width*width-1\")\r\n\r\n    def _idx_to_pos(self, idx: int) -> tuple[int, int]:\r\n        return idx // self.width, idx % self.width\r\n\r\n    def _val_to_idx(self, i: int, j: int) -> int:\r\n        return i * self.width + j\r\n\r\n    def swap(self, i_old: int, j_old: int, i_new: int, j_new: int) -> Self:\r\n        assert 0 <= i_new < self.width and 0 <= j_new < self.width\r\n        array_new = list(self.array)\r\n\r\n        old_idx = self._val_to_idx(i_old, j_old)\r\n        new_idx = self._val_to_idx(i_new, j_new)\r\n\r\n        array_new[old_idx], array_new[new_idx] = array_new[new_idx], array_new[old_idx]\r\n        return State(*array_new)\r\n\r\n    def get_blank_tile(self) -> tuple[int, int]:\r\n        for idx, cell in enumerate(self.array):\r\n            if cell == self.blank:\r\n                return self._idx_to_pos(idx)\r\n\r\n    def get_positions(self) -> dict[int, tuple[int, int]]:\r\n        return {val: self._idx_to_pos(idx) for idx, val in enumerate(self.array) if val != 0}\r\n\r\n###\r\n"
			}
		],
		"id": "src/state.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "utils.py",
		"path": "src/utils.py",
		"folderPath": "src",
		"fileContent": "import os\r\n\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\ndef make_dir(dir) -> None:\r\n    if not os.path.exists(dir):\r\n        os.makedirs(dir)\r\n\r\n\r\ndef create_scatterplot_and_save(df, x, y, file_path) -> None:\r\n    plt.rcParams[\"font.family\"] = \"SF Compact Text\"\r\n    font_scale = 2\r\n    sns.set(font_scale=font_scale, font=\"SF Compact Text\")\r\n\r\n    plt.figure(figsize=(8, 6))\r\n    sns.scatterplot(data=df, x=x, y=y, alpha=0.7)\r\n    plt.axhline(y=0, color=\"red\", linestyle=\"--\")\r\n    plt.xlabel(\"Cost\")\r\n    plt.ylabel(\"Residuals\")\r\n    plt.tight_layout()\r\n    plt.savefig(file_path)\r\n",
		"documentation": "# utils.py\n\nThis is a Python utility file named `utils.py`. It contains two main functions: `make_dir` and `create_scatterplot_and_save`. The file is primarily used for creating directories and generating scatter plots from a given DataFrame.\n\n## Import Statements\n\nThe file begins with import statements for the `os`, `seaborn`, and `matplotlib.pyplot` modules. \n\n- `os` is a standard Python library for interacting with the operating system.\n- `seaborn` and `matplotlib.pyplot` are popular data visualization libraries in Python.\n\n## Function: make_dir\n\n```python\ndef make_dir(dir) -> None:\n    if not os.path.exists(dir):\n        os.makedirs(dir)\n```\n\nThis function takes a single parameter, `dir`, which is the path of the directory to be created. If the directory does not already exist, it is created using the `os.makedirs` function.\n\n### Example\n\n```python\nmake_dir('/path/to/directory')\n```\n\nThis will create a directory at the specified path if it does not already exist.\n\n## Function: create_scatterplot_and_save\n\n```python\ndef create_scatterplot_and_save(df, x, y, file_path) -> None:\n    plt.rcParams[\"font.family\"] = \"SF Compact Text\"\n    font_scale = 2\n    sns.set(font_scale=font_scale, font=\"SF Compact Text\")\n\n    plt.figure(figsize=(8, 6))\n    sns.scatterplot(data=df, x=x, y=y, alpha=0.7)\n    plt.axhline(y=0, color=\"red\", linestyle=\"--\")\n    plt.xlabel(\"Cost\")\n    plt.ylabel(\"Residuals\")\n    plt.tight_layout()\n    plt.savefig(file_path)\n```\n\nThis function creates a scatter plot from a DataFrame and saves it to a specified file path. It takes four parameters:\n\n- `df`: The DataFrame containing the data to be plotted.\n- `x`: The column in the DataFrame to be used for the x-axis.\n- `y`: The column in the DataFrame to be used for the y-axis.\n- `file_path`: The path where the plot will be saved.\n\nThe function first sets the font family and scale for the plot. It then creates a scatter plot with the specified x and y data, adds a horizontal line at y=0, labels the x and y axes, adjusts the layout to fit the plot neatly within the figure, and finally saves the figure to the specified file path.\n\n### Example\n\n```python\ncreate_scatterplot_and_save(df, 'cost', 'residuals', '/path/to/save/plot.png')\n```\n\nThis will create a scatter plot with 'cost' on the x-axis and 'residuals' on the y-axis, and save the plot as a PNG file at the specified path.",
		"isFolder": false,
		"updated": "2025-03-07T03:31:52.125Z",
		"sidebar_position": 6,
		"sidebar_label": "utils.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"utils.py\"\r\nThe file name is: utils.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport os\r\n\r\nimport seaborn as sns\r\nimport matplotlib.pyplot as plt\r\n\r\n\r\ndef make_dir(dir) -> None:\r\n    if not os.path.exists(dir):\r\n        os.makedirs(dir)\r\n\r\n\r\ndef create_scatterplot_and_save(df, x, y, file_path) -> None:\r\n    plt.rcParams[\"font.family\"] = \"SF Compact Text\"\r\n    font_scale = 2\r\n    sns.set(font_scale=font_scale, font=\"SF Compact Text\")\r\n\r\n    plt.figure(figsize=(8, 6))\r\n    sns.scatterplot(data=df, x=x, y=y, alpha=0.7)\r\n    plt.axhline(y=0, color=\"red\", linestyle=\"--\")\r\n    plt.xlabel(\"Cost\")\r\n    plt.ylabel(\"Residuals\")\r\n    plt.tight_layout()\r\n    plt.savefig(file_path)\r\n\r\n###\r\n"
			}
		],
		"id": "src/utils.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "__init__.py",
		"path": "src/algorithms/__init__.py",
		"folderPath": "src/algorithms",
		"fileContent": "from .astar import *\r\nfrom .gbfs import *\r\nfrom .rbfs import *\r\n",
		"documentation": "# __init__.py\n\n## Overview\n\nThe `__init__.py` file is a special file in Python. It is often used to initialize Python packages. The presence of this file in a directory indicates to the Python interpreter that the directory should be treated like a Python package. \n\nIn this specific `__init__.py` file, we are importing all the functions from three different modules: `astar`, `gbfs`, and `rbfs`. These modules are likely to be Python files that contain implementations of different search algorithms.\n\n## Code Description\n\n```python\nfrom .astar import *\nfrom .gbfs import *\nfrom .rbfs import *\n```\n\nThe above lines of code are importing everything (`*`) from the three modules `astar`, `gbfs`, and `rbfs`. The dot (`.`) before the module name is a relative import which means it's importing from the current package.\n\n## Modules Description\n\n### Astar Module\n\nThe `astar` module likely contains the implementation of the A* search algorithm. A* is a popular choice for pathfinding and graph traversal, which is the process of finding a path between multiple points, called \"nodes\".\n\n### GBFS Module\n\nThe `gbfs` module likely contains the implementation of the Greedy Best-First-Search algorithm. GBFS is a search algorithm that explores a graph by visiting the next closest unvisited node until it reaches the goal node.\n\n### RBFS Module\n\nThe `rbfs` module likely contains the implementation of the Recursive Best-First Search algorithm. RBFS is an algorithm that combines the advantages of both A* and iterative deepening search by using a specified amount of memory, and is optimal like A*.\n\n## Usage\n\nTo use any function from these modules, you can simply import this package. Since we have imported everything in the `__init__.py` file, all functions will be available when this package is imported.\n\n```python\nimport package_name\n```\n\nReplace `package_name` with the name of the package that contains this `__init__.py` file. After importing the package, you can call any function from the `astar`, `gbfs`, or `rbfs` modules.\n\n## Conclusion\n\nThis `__init__.py` file serves as an entry point to a Python package containing implementations of various search algorithms. By importing all functions from the `astar`, `gbfs`, and `rbfs` modules, it provides a convenient way to access these functions when the package is imported.",
		"isFolder": false,
		"updated": "2025-03-07T03:32:10.564Z",
		"sidebar_position": 0,
		"sidebar_label": "__init__.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/algorithms",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"__init__.py\"\r\nThe file name is: __init__.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .astar import *\r\nfrom .gbfs import *\r\nfrom .rbfs import *\r\n\r\n###\r\n"
			}
		],
		"id": "src/algorithms/__init__.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "algorithms"
		}
	},
	{
		"name": "abstract_search.py",
		"path": "src/algorithms/abstract_search.py",
		"folderPath": "src/algorithms",
		"fileContent": "from enum import Enum\r\nfrom dataclasses import dataclass\r\nfrom abc import ABC, abstractmethod\r\n\r\nfrom ..heuristics import CallableHeuristicClass\r\n\r\nfrom ..node import Node\r\nfrom ..state import State\r\n\r\n\r\nclass Result(Enum):\r\n    SUCCESS = \"success\"\r\n    FAILURE = \"failure\"\r\n    CUTOFF = \"cutoff\"\r\n\r\n\r\n@dataclass\r\nclass SearchResult(object):\r\n    \"\"\"\r\n    Represents the result of a search algorithm.\r\n\r\n    Attributes:\r\n    - `result (Result)`: The result of the search.\r\n    - `path (list[Node] | None)`: The path from the start node to the goal node, if found.\r\n    - `time_cp (int)`: The time complexity of the search algorithm.\r\n    - `space_cp (int)`: The space complexity of the search algorithm.\r\n\r\n    Methods:\r\n    - `print_result()`: Print the result. If a path is found, print the path.\r\n    \"\"\"\r\n\r\n    result: Result\r\n    path: list[Node] | None\r\n    time_cp: int\r\n    space_cp: int\r\n\r\n    def print_result(self) -> None:\r\n        print(self.result)\r\n        if self.path is not None:\r\n            print(\"Path:\")\r\n            print(f\"\\tLength: {len(self.path) - 1}\")\r\n            for p in self.path:\r\n                print(f\"\\t{p}\")\r\n        else:\r\n            print(\"No Path is found\")\r\n        print(f\"Space: {self.space_cp}\")\r\n        print(f\"Time: {self.time_cp}\")\r\n\r\n\r\nclass SearchAlgorithm(ABC):\r\n    \"\"\"\r\n    An abstract class representing a search algorithm. Subclasses should implement the `search`\r\n    method to define the specific search algorithm.\r\n\r\n    Methods:\r\n    - `solve(start_state: State, goal_state: State, print: bool = True) -> None`:\r\n        Set the goal state of the search algorithm, then search using `_search()`\r\n    - `_search(start: Node) -> SearchResult`:\r\n        Searches for a path from the start node to the goal node. Returns a `SearchResult` object.\r\n        Must be implemented.\r\n    \"\"\"\r\n\r\n    def _is_goal(self, node: Node) -> bool:\r\n        return node.state == self.goal_state\r\n\r\n    def _reconstruct_path(self, node: Node) -> list[Node]:\r\n        path: list[Node] = []\r\n        while node is not None:\r\n            path.append(node)\r\n            node = node.parent\r\n        return path[::-1]\r\n\r\n    def _set_goal(self, goal_state: State) -> None:\r\n        self.goal_state = goal_state\r\n\r\n    @abstractmethod\r\n    def _search(self, start_state: State) -> SearchResult: ...  ## noqa\r\n\r\n    def solve(\r\n        self, start_state: State, goal_state: State, do_print: bool = False\r\n    ) -> SearchResult:\r\n        self._set_goal(goal_state)\r\n        search_result = self._search(start_state)\r\n        if do_print:\r\n            search_result.print_result()\r\n        return search_result\r\n\r\n\r\nclass UninformedSearchAlgorithm(SearchAlgorithm):\r\n    \"\"\"\r\n    An abstract class representing an uninformed search algorithm.\r\n\r\n    This class inherits from the `SearchAlgorithm` class and provides a template for implementing\r\n    uninformed search algorithms. Subclasses should implement the `search` method to define the\r\n    specific search algorithm.\r\n    \"\"\"\r\n\r\n    def __init__(self) -> None:\r\n        super().__init__()\r\n\r\n\r\nclass InformedSearchAlgorithm(SearchAlgorithm):\r\n    \"\"\"\r\n    An abstract class representing an informed search algorithm.\r\n\r\n    This class inherits from the `SearchAlgorithm` class and provides a template for implementing\r\n    informed search algorithms. Subclasses should implement the `search` method to define the\r\n    specific search algorithm.\r\n\r\n    Attributes:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass) -> None:\r\n        super().__init__()\r\n        self.heuristic = heuristic\r\n\r\n    def h_cost(self, node: Node) -> int:\r\n        return self.heuristic(node.state, self.goal_state)\r\n",
		"documentation": "# abstract_search.py\n\nThis Python file, `abstract_search.py`, contains classes and methods that define the structure and functionality of search algorithms. It includes both uninformed and informed search algorithms, as well as a class to represent the result of a search algorithm. The file uses Python's built-in `enum`, `dataclasses`, and `abc` modules, as well as custom modules `heuristics`, `node`, and `state`.\n\n## SearchResult Class\n\nThe `SearchResult` class represents the result of a search algorithm. It has four attributes:\n\n- `result`: The result of the search, which is an instance of the `Result` enum class.\n- `path`: The path from the start node to the goal node, if found. It is a list of `Node` objects or `None`.\n- `time_cp`: The time complexity of the search algorithm.\n- `space_cp`: The space complexity of the search algorithm.\n\nThe `SearchResult` class also has a method `print_result()`, which prints the result. If a path is found, it also prints the path.\n\n## SearchAlgorithm Class\n\nThe `SearchAlgorithm` class is an abstract base class representing a search algorithm. It has several methods:\n\n- `_is_goal(node: Node)`: Checks if the given node is the goal state.\n- `_reconstruct_path(node: Node)`: Reconstructs the path from the start node to the given node.\n- `_set_goal(goal_state: State)`: Sets the goal state of the search algorithm.\n- `_search(start_state: State)`: An abstract method that searches for a path from the start node to the goal node. It returns a `SearchResult` object. This method must be implemented by any class that inherits from `SearchAlgorithm`.\n- `solve(start_state: State, goal_state: State, do_print: bool = False)`: Sets the goal state of the search algorithm, then searches using `_search()`. If `do_print` is `True`, it also prints the result.\n\n## UninformedSearchAlgorithm Class\n\nThe `UninformedSearchAlgorithm` class is an abstract class representing an uninformed search algorithm. It inherits from the `SearchAlgorithm` class. Any specific uninformed search algorithm should be implemented as a subclass of this class.\n\n## InformedSearchAlgorithm Class\n\nThe `InformedSearchAlgorithm` class is an abstract class representing an informed search algorithm. It inherits from the `SearchAlgorithm` class and has an additional attribute:\n\n- `heuristic`: The heuristic function, which is an instance of the `CallableHeuristicClass`.\n\nThe `InformedSearchAlgorithm` class also has a method `h_cost(node: Node)`, which calculates the heuristic cost of the given node. Any specific informed search algorithm should be implemented as a subclass of this class.",
		"isFolder": false,
		"updated": "2025-03-07T03:32:29.571Z",
		"sidebar_position": 1,
		"sidebar_label": "abstract_search.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/algorithms",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"abstract_search.py\"\r\nThe file name is: abstract_search.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom enum import Enum\r\nfrom dataclasses import dataclass\r\nfrom abc import ABC, abstractmethod\r\n\r\nfrom ..heuristics import CallableHeuristicClass\r\n\r\nfrom ..node import Node\r\nfrom ..state import State\r\n\r\n\r\nclass Result(Enum):\r\n    SUCCESS = \"success\"\r\n    FAILURE = \"failure\"\r\n    CUTOFF = \"cutoff\"\r\n\r\n\r\n@dataclass\r\nclass SearchResult(object):\r\n    \"\"\"\r\n    Represents the result of a search algorithm.\r\n\r\n    Attributes:\r\n    - `result (Result)`: The result of the search.\r\n    - `path (list[Node] | None)`: The path from the start node to the goal node, if found.\r\n    - `time_cp (int)`: The time complexity of the search algorithm.\r\n    - `space_cp (int)`: The space complexity of the search algorithm.\r\n\r\n    Methods:\r\n    - `print_result()`: Print the result. If a path is found, print the path.\r\n    \"\"\"\r\n\r\n    result: Result\r\n    path: list[Node] | None\r\n    time_cp: int\r\n    space_cp: int\r\n\r\n    def print_result(self) -> None:\r\n        print(self.result)\r\n        if self.path is not None:\r\n            print(\"Path:\")\r\n            print(f\"\\tLength: {len(self.path) - 1}\")\r\n            for p in self.path:\r\n                print(f\"\\t{p}\")\r\n        else:\r\n            print(\"No Path is found\")\r\n        print(f\"Space: {self.space_cp}\")\r\n        print(f\"Time: {self.time_cp}\")\r\n\r\n\r\nclass SearchAlgorithm(ABC):\r\n    \"\"\"\r\n    An abstract class representing a search algorithm. Subclasses should implement the `search`\r\n    method to define the specific search algorithm.\r\n\r\n    Methods:\r\n    - `solve(start_state: State, goal_state: State, print: bool = True) -> None`:\r\n        Set the goal state of the search algorithm, then search using `_search()`\r\n    - `_search(start: Node) -> SearchResult`:\r\n        Searches for a path from the start node to the goal node. Returns a `SearchResult` object.\r\n        Must be implemented.\r\n    \"\"\"\r\n\r\n    def _is_goal(self, node: Node) -> bool:\r\n        return node.state == self.goal_state\r\n\r\n    def _reconstruct_path(self, node: Node) -> list[Node]:\r\n        path: list[Node] = []\r\n        while node is not None:\r\n            path.append(node)\r\n            node = node.parent\r\n        return path[::-1]\r\n\r\n    def _set_goal(self, goal_state: State) -> None:\r\n        self.goal_state = goal_state\r\n\r\n    @abstractmethod\r\n    def _search(self, start_state: State) -> SearchResult: ...  ## noqa\r\n\r\n    def solve(\r\n        self, start_state: State, goal_state: State, do_print: bool = False\r\n    ) -> SearchResult:\r\n        self._set_goal(goal_state)\r\n        search_result = self._search(start_state)\r\n        if do_print:\r\n            search_result.print_result()\r\n        return search_result\r\n\r\n\r\nclass UninformedSearchAlgorithm(SearchAlgorithm):\r\n    \"\"\"\r\n    An abstract class representing an uninformed search algorithm.\r\n\r\n    This class inherits from the `SearchAlgorithm` class and provides a template for implementing\r\n    uninformed search algorithms. Subclasses should implement the `search` method to define the\r\n    specific search algorithm.\r\n    \"\"\"\r\n\r\n    def __init__(self) -> None:\r\n        super().__init__()\r\n\r\n\r\nclass InformedSearchAlgorithm(SearchAlgorithm):\r\n    \"\"\"\r\n    An abstract class representing an informed search algorithm.\r\n\r\n    This class inherits from the `SearchAlgorithm` class and provides a template for implementing\r\n    informed search algorithms. Subclasses should implement the `search` method to define the\r\n    specific search algorithm.\r\n\r\n    Attributes:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass) -> None:\r\n        super().__init__()\r\n        self.heuristic = heuristic\r\n\r\n    def h_cost(self, node: Node) -> int:\r\n        return self.heuristic(node.state, self.goal_state)\r\n\r\n###\r\n"
			}
		],
		"id": "src/algorithms/abstract_search.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "algorithms"
		}
	},
	{
		"name": "astar.py",
		"path": "src/algorithms/astar.py",
		"folderPath": "src/algorithms",
		"fileContent": "from queue import PriorityQueue\r\n\r\nfrom ..heuristics import CallableHeuristicClass\r\nfrom ..algorithms.abstract_search import Result, SearchResult, InformedSearchAlgorithm\r\nfrom ..node import PNode\r\nfrom ..state import State\r\n\r\n\r\nclass AStar(InformedSearchAlgorithm):\r\n    \"\"\"\r\n    A* search algorithm implementation.\r\n\r\n    Args:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass) -> None:\r\n        super().__init__(heuristic)\r\n        self.name = \"A*\"\r\n\r\n    def _search(self, start_state: State) -> SearchResult:\r\n        start = PNode(start_state)\r\n        start.f_cost = start.cost + self.h_cost(start)\r\n\r\n        frontier: PriorityQueue[PNode] = PriorityQueue()\r\n        frontier.put(start)\r\n\r\n        closed: set[State] = set()\r\n\r\n        time_cp = 0\r\n        space_cp = len(closed) + frontier.qsize()\r\n\r\n        while frontier:\r\n            node = frontier.get()\r\n            closed.add(node.state)\r\n\r\n            time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n            if self._is_goal(node):\r\n                path = self._reconstruct_path(node)\r\n                return SearchResult(\r\n                    result=Result.SUCCESS, path=path, time_cp=time_cp, space_cp=space_cp\r\n                )\r\n\r\n            for child in node.expand():\r\n                if child.state not in closed:\r\n                    child.f_cost = child.cost + self.h_cost(child)\r\n                    frontier.put(child)\r\n                    time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n        return SearchResult(\r\n            result=Result.FAILURE, path=None, time_cp=time_cp, space_cp=space_cp\r\n        )\r\n\r\n\r\n__all__ = [\"AStar\"]\r\n",
		"documentation": "# astar.py\n\nThis is a Python code file that implements the A* search algorithm. The A* algorithm is a popular choice in pathfinding and graph traversal, which is the process of finding a path between multiple points, called \"nodes\". It's widely used in applications such as maps, robotics, and AI.\n\n## Class: AStar\n\nThe `AStar` class is a subclass of the `InformedSearchAlgorithm` class. It uses a heuristic function to guide its search.\n\n### Initialization\n\nThe class is initialized with a heuristic function of type `CallableHeuristicClass`. This function is used to estimate the cost (distance, time, etc.) to reach the goal from a given node.\n\n```python\nastar = AStar(heuristic)\n```\n\n### Method: _search\n\nThe `_search` method is the core of the A* algorithm. It takes a `start_state` of type `State` as an argument and returns a `SearchResult` object.\n\n```python\nresult = astar._search(start_state)\n```\n\n#### Parameters\n\n- `start_state` (`State`): The initial state from which the search begins.\n\n#### Return\n\n- `SearchResult`: An object that contains the result of the search. It includes whether the search was successful (`result`), the path to the goal (`path`), the time complexity (`time_cp`), and the space complexity (`space_cp`).\n\n### Method: _is_goal\n\nThis method checks if the current node is the goal. It's used internally by the `_search` method.\n\n### Method: _reconstruct_path\n\nThis method is used to trace back the path from the start node to the goal node once the goal has been found. It's used internally by the `_search` method.\n\n### Method: h_cost\n\nThis method calculates the heuristic cost from the current node to the goal. It's used internally by the `_search` method.\n\n## Usage\n\nHere's an example of how to use the `AStar` class:\n\n```python\n# Define a heuristic function\ndef heuristic(node):\n    # ... implementation ...\n\n# Initialize the A* algorithm with the heuristic\nastar = AStar(heuristic)\n\n# Define the start state\nstart_state = State()\n\n# Run the search\nresult = astar._search(start_state)\n\n# Print the result\nprint(result)\n```\n\n## Note\n\nThe A* algorithm is an informed search algorithm, meaning it uses knowledge about the problem to guide its search. This is in contrast to uninformed search algorithms, which explore the search space without any guidance. The heuristic function is what provides this guidance in the A* algorithm. It's a function that estimates the cost to reach the goal from a given node. The better the heuristic, the more efficient the search.",
		"isFolder": false,
		"updated": "2025-03-07T03:32:50.849Z",
		"sidebar_position": 2,
		"sidebar_label": "astar.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/algorithms",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"astar.py\"\r\nThe file name is: astar.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom queue import PriorityQueue\r\n\r\nfrom ..heuristics import CallableHeuristicClass\r\nfrom ..algorithms.abstract_search import Result, SearchResult, InformedSearchAlgorithm\r\nfrom ..node import PNode\r\nfrom ..state import State\r\n\r\n\r\nclass AStar(InformedSearchAlgorithm):\r\n    \"\"\"\r\n    A* search algorithm implementation.\r\n\r\n    Args:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass) -> None:\r\n        super().__init__(heuristic)\r\n        self.name = \"A*\"\r\n\r\n    def _search(self, start_state: State) -> SearchResult:\r\n        start = PNode(start_state)\r\n        start.f_cost = start.cost + self.h_cost(start)\r\n\r\n        frontier: PriorityQueue[PNode] = PriorityQueue()\r\n        frontier.put(start)\r\n\r\n        closed: set[State] = set()\r\n\r\n        time_cp = 0\r\n        space_cp = len(closed) + frontier.qsize()\r\n\r\n        while frontier:\r\n            node = frontier.get()\r\n            closed.add(node.state)\r\n\r\n            time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n            if self._is_goal(node):\r\n                path = self._reconstruct_path(node)\r\n                return SearchResult(\r\n                    result=Result.SUCCESS, path=path, time_cp=time_cp, space_cp=space_cp\r\n                )\r\n\r\n            for child in node.expand():\r\n                if child.state not in closed:\r\n                    child.f_cost = child.cost + self.h_cost(child)\r\n                    frontier.put(child)\r\n                    time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n        return SearchResult(\r\n            result=Result.FAILURE, path=None, time_cp=time_cp, space_cp=space_cp\r\n        )\r\n\r\n\r\n__all__ = [\"AStar\"]\r\n\r\n###\r\n"
			}
		],
		"id": "src/algorithms/astar.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "algorithms"
		}
	},
	{
		"name": "gbfs.py",
		"path": "src/algorithms/gbfs.py",
		"folderPath": "src/algorithms",
		"fileContent": "from queue import PriorityQueue\r\n\r\nfrom ..heuristics import CallableHeuristicClass\r\nfrom ..algorithms.abstract_search import Result, SearchResult, InformedSearchAlgorithm\r\nfrom ..node import PNode\r\nfrom ..state import State\r\n\r\n\r\nclass GBFS(InformedSearchAlgorithm):\r\n    \"\"\"\r\n    GBFS search algorithm implementation.\r\n\r\n    Args:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass) -> None:\r\n        super().__init__(heuristic)\r\n        self.name = \"GBFS\"\r\n\r\n    def _search(self, start_state: State) -> SearchResult:\r\n        start = PNode(start_state)\r\n        start.f_cost = self.h_cost(start)\r\n\r\n        frontier: PriorityQueue[PNode] = PriorityQueue()\r\n        frontier.put(start)\r\n\r\n        closed: set[State] = set()\r\n\r\n        time_cp = 0\r\n        space_cp = len(closed) + frontier.qsize()\r\n\r\n        while frontier:\r\n            node = frontier.get()\r\n            closed.add(node.state)\r\n\r\n            time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n            if self._is_goal(node):\r\n                path = self._reconstruct_path(node)\r\n                return SearchResult(\r\n                    result=Result.SUCCESS, path=path, time_cp=time_cp, space_cp=space_cp\r\n                )\r\n\r\n            for child in node.expand():\r\n                if child.state not in closed:\r\n                    child.f_cost = self.h_cost(child)\r\n                    frontier.put(child)\r\n                    time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n        return SearchResult(\r\n            result=Result.FAILURE, path=None, time_cp=time_cp, space_cp=space_cp\r\n        )\r\n\r\n\r\n__all__ = [\"GBFS\"]\r\n",
		"documentation": "# gbfs.py\n\nThis is a Python code file named `gbfs.py` which contains the implementation of the Greedy Best-First Search (GBFS) algorithm. GBFS is an informed search algorithm that uses a heuristic function to estimate the cost of reaching the goal from a given state.\n\n## Class: GBFS\n\nThe `GBFS` class is a subclass of the `InformedSearchAlgorithm` abstract base class. It overrides the `_search` method to implement the GBFS algorithm.\n\n### Initialization\n\nThe `GBFS` class is initialized with a `heuristic` argument of type `CallableHeuristicClass`. This heuristic function is used to estimate the cost of reaching the goal from a given state.\n\n```python\ngbfs = GBFS(heuristic)\n```\n\n### Method: _search\n\nThe `_search` method is the main method of the `GBFS` class. It takes a `start_state` of type `State` as an argument and returns a `SearchResult` object.\n\n```python\nresult = gbfs._search(start_state)\n```\n\nThe method initializes a priority queue `frontier` with the `start_state` and a `closed` set to keep track of visited states. It then enters a loop where it continuously dequeues a node from the `frontier`, adds it to the `closed` set, and checks if it is a goal node. If it is, it reconstructs the path from the start state to the goal node and returns a `SearchResult` object with a `SUCCESS` result. If it is not, it expands the node, adds the resulting child nodes to the `frontier` if they have not been visited before, and continues with the next iteration of the loop. If the `frontier` is empty, it returns a `SearchResult` object with a `FAILURE` result.\n\nThe `_search` method also keeps track of the time complexity `time_cp` and space complexity `space_cp` of the search.\n\n### Method: _reconstruct_path\n\nThe `_reconstruct_path` method is a helper method used to reconstruct the path from the start state to a given goal node. It is not directly called by the user but is used internally by the `_search` method.\n\n### Method: _is_goal\n\nThe `_is_goal` method is a helper method used to check if a given node is a goal node. It is not directly called by the user but is used internally by the `_search` method.\n\n## Examples\n\nHere is an example of how to use the `GBFS` class:\n\n```python\n# Define a heuristic function\ndef heuristic(state):\n    # ... implementation of the heuristic ...\n\n# Initialize the GBFS class\ngbfs = GBFS(heuristic)\n\n# Define a start state\nstart_state = State()\n\n# Perform the search\nresult = gbfs._search(start_state)\n\n# Print the result\nprint(result)\n```\n\n## Technical Concepts\n\nThe `GBFS` class uses a priority queue to keep track of the frontier, i.e., the set of nodes that are to be explored. The priority of a node in the queue is determined by the heuristic cost of the node. This is why GBFS is called a \"greedy\" algorithm: it always chooses to explore the node with the lowest heuristic cost, i.e., the node that it estimates to be closest to the goal.\n\nThe `GBFS` class also uses a set to keep track of the closed list, i.e., the set of nodes that have already been explored. This is to prevent the algorithm from exploring the same node more than once.\n\nThe `GBFS` class uses the `CallableHeuristicClass` type for the heuristic function. This is a callable class, i.e., a class that implements the `__call__` method, which allows instances of the class to be called as if they were functions. This is a common pattern in Python for creating function-like objects that have state.",
		"isFolder": false,
		"updated": "2025-03-07T03:33:27.085Z",
		"sidebar_position": 3,
		"sidebar_label": "gbfs.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/algorithms",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"gbfs.py\"\r\nThe file name is: gbfs.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom queue import PriorityQueue\r\n\r\nfrom ..heuristics import CallableHeuristicClass\r\nfrom ..algorithms.abstract_search import Result, SearchResult, InformedSearchAlgorithm\r\nfrom ..node import PNode\r\nfrom ..state import State\r\n\r\n\r\nclass GBFS(InformedSearchAlgorithm):\r\n    \"\"\"\r\n    GBFS search algorithm implementation.\r\n\r\n    Args:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass) -> None:\r\n        super().__init__(heuristic)\r\n        self.name = \"GBFS\"\r\n\r\n    def _search(self, start_state: State) -> SearchResult:\r\n        start = PNode(start_state)\r\n        start.f_cost = self.h_cost(start)\r\n\r\n        frontier: PriorityQueue[PNode] = PriorityQueue()\r\n        frontier.put(start)\r\n\r\n        closed: set[State] = set()\r\n\r\n        time_cp = 0\r\n        space_cp = len(closed) + frontier.qsize()\r\n\r\n        while frontier:\r\n            node = frontier.get()\r\n            closed.add(node.state)\r\n\r\n            time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n            if self._is_goal(node):\r\n                path = self._reconstruct_path(node)\r\n                return SearchResult(\r\n                    result=Result.SUCCESS, path=path, time_cp=time_cp, space_cp=space_cp\r\n                )\r\n\r\n            for child in node.expand():\r\n                if child.state not in closed:\r\n                    child.f_cost = self.h_cost(child)\r\n                    frontier.put(child)\r\n                    time_cp += 1\r\n            space_cp = max(space_cp, len(closed) + frontier.qsize())\r\n\r\n        return SearchResult(\r\n            result=Result.FAILURE, path=None, time_cp=time_cp, space_cp=space_cp\r\n        )\r\n\r\n\r\n__all__ = [\"GBFS\"]\r\n\r\n###\r\n"
			}
		],
		"id": "src/algorithms/gbfs.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "algorithms"
		}
	},
	{
		"name": "rbfs.py",
		"path": "src/algorithms/rbfs.py",
		"folderPath": "src/algorithms",
		"fileContent": "from ..heuristics import CallableHeuristicClass\r\nfrom ..algorithms.abstract_search import Result, SearchResult, InformedSearchAlgorithm\r\nfrom ..node import PNode\r\nfrom ..state import State\r\n\r\n\r\nclass RBFS(InformedSearchAlgorithm):\r\n    \"\"\"\r\n    Recursive Best First Search (RBFS) algorithm implementation.\r\n\r\n    Args:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    - `limit` (`int`): Limit for the f_cost of nodes.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass, limit: int = 1e15) -> None:\r\n        super().__init__(heuristic)\r\n        self.limit = limit\r\n        self.name = \"RBFS\"\r\n\r\n    def _rbfs(\r\n        self, node: PNode, limit: int, time_cp: int = 1, space_cp: int = 1\r\n    ) -> tuple[SearchResult, int]:\r\n        if self._is_goal(node):\r\n            path = self._reconstruct_path(node)\r\n            return SearchResult(Result.SUCCESS, path, time_cp, space_cp), limit\r\n\r\n        children: list[PNode] = []\r\n\r\n        for child in node.expand():\r\n            child.f_cost = max(child.cost + self.h_cost(child), node.f_cost)\r\n            if node.parent is not None:\r\n                if child.state == node.parent.state:\r\n                    child.f_cost = 1e20\r\n            children.append(child)\r\n\r\n        while True:\r\n            children.sort(key=lambda node: node.f_cost)\r\n\r\n            best = children[0]\r\n            if best.f_cost > limit:\r\n                return SearchResult(Result.FAILURE, None, time_cp, space_cp), best.f_cost\r\n\r\n            alternative = children[1]\r\n            search_result, best.f_cost = self._rbfs(\r\n                best, min(limit, alternative.f_cost), time_cp, space_cp\r\n            )\r\n            if search_result.result != Result.FAILURE:\r\n                return search_result, best.f_cost\r\n\r\n    def _search(self, start_state: State) -> SearchResult:\r\n        start = PNode(start_state)\r\n        start.f_cost = start.cost + self.h_cost(start)\r\n\r\n        search_result, _ = self._rbfs(start, self.limit)\r\n        return search_result\r\n\r\n\r\n__all__ = [\"RBFS\"]\r\n",
		"documentation": "# rbfs.py\n\nThis is a Python code file that implements the Recursive Best First Search (RBFS) algorithm. The RBFS algorithm is a type of informed search algorithm that uses a heuristic function to guide its search. This implementation of the RBFS algorithm is designed to be used with a callable heuristic class and allows for a limit to be set on the f_cost of nodes.\n\n## Class: RBFS\n\nThe `RBFS` class is the main class in this file. It inherits from the `InformedSearchAlgorithm` class.\n\n### Initialization\n\nThe `RBFS` class is initialized with two parameters:\n\n- `heuristic` (`CallableHeuristicClass`): This is the heuristic function that the RBFS algorithm will use to guide its search. It must be an instance of the `CallableHeuristicClass`.\n\n- `limit` (`int`): This is the limit for the f_cost of nodes. The default value is 1e15.\n\n### Method: _rbfs\n\nThe `_rbfs` method is a private method that implements the main logic of the RBFS algorithm. It takes four parameters:\n\n- `node` (`PNode`): This is the node that the algorithm is currently examining.\n\n- `limit` (`int`): This is the limit for the f_cost of nodes.\n\n- `time_cp` (`int`): This is a counter for the time complexity of the algorithm. The default value is 1.\n\n- `space_cp` (`int`): This is a counter for the space complexity of the algorithm. The default value is 1.\n\nThe `_rbfs` method returns a tuple containing a `SearchResult` object and an integer representing the f_cost of the node.\n\n### Method: _search\n\nThe `_search` method is a private method that starts the RBFS algorithm. It takes one parameter:\n\n- `start_state` (`State`): This is the state from which the algorithm will start its search.\n\nThe `_search` method returns a `SearchResult` object.\n\n## Examples\n\nHere is an example of how to use the `RBFS` class:\n\n```python\nfrom heuristics import MyHeuristic\nfrom rbfs import RBFS\nfrom state import MyState\n\n# Initialize the heuristic\nheuristic = MyHeuristic()\n\n# Initialize the RBFS algorithm\nrbfs = RBFS(heuristic, limit=1000)\n\n# Initialize the start state\nstart_state = MyState()\n\n# Start the search\nresult = rbfs._search(start_state)\n```\n\nIn this example, `MyHeuristic` and `MyState` are placeholder names for your own heuristic and state classes. You would replace these with the actual classes that you are using in your code.",
		"isFolder": false,
		"updated": "2025-03-07T03:33:45.070Z",
		"sidebar_position": 4,
		"sidebar_label": "rbfs.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/algorithms",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"rbfs.py\"\r\nThe file name is: rbfs.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom ..heuristics import CallableHeuristicClass\r\nfrom ..algorithms.abstract_search import Result, SearchResult, InformedSearchAlgorithm\r\nfrom ..node import PNode\r\nfrom ..state import State\r\n\r\n\r\nclass RBFS(InformedSearchAlgorithm):\r\n    \"\"\"\r\n    Recursive Best First Search (RBFS) algorithm implementation.\r\n\r\n    Args:\r\n    - `heuristic` (`CallableHeuristicClass`): The heuristic function.\r\n    - `limit` (`int`): Limit for the f_cost of nodes.\r\n    \"\"\"\r\n\r\n    def __init__(self, heuristic: CallableHeuristicClass, limit: int = 1e15) -> None:\r\n        super().__init__(heuristic)\r\n        self.limit = limit\r\n        self.name = \"RBFS\"\r\n\r\n    def _rbfs(\r\n        self, node: PNode, limit: int, time_cp: int = 1, space_cp: int = 1\r\n    ) -> tuple[SearchResult, int]:\r\n        if self._is_goal(node):\r\n            path = self._reconstruct_path(node)\r\n            return SearchResult(Result.SUCCESS, path, time_cp, space_cp), limit\r\n\r\n        children: list[PNode] = []\r\n\r\n        for child in node.expand():\r\n            child.f_cost = max(child.cost + self.h_cost(child), node.f_cost)\r\n            if node.parent is not None:\r\n                if child.state == node.parent.state:\r\n                    child.f_cost = 1e20\r\n            children.append(child)\r\n\r\n        while True:\r\n            children.sort(key=lambda node: node.f_cost)\r\n\r\n            best = children[0]\r\n            if best.f_cost > limit:\r\n                return SearchResult(Result.FAILURE, None, time_cp, space_cp), best.f_cost\r\n\r\n            alternative = children[1]\r\n            search_result, best.f_cost = self._rbfs(\r\n                best, min(limit, alternative.f_cost), time_cp, space_cp\r\n            )\r\n            if search_result.result != Result.FAILURE:\r\n                return search_result, best.f_cost\r\n\r\n    def _search(self, start_state: State) -> SearchResult:\r\n        start = PNode(start_state)\r\n        start.f_cost = start.cost + self.h_cost(start)\r\n\r\n        search_result, _ = self._rbfs(start, self.limit)\r\n        return search_result\r\n\r\n\r\n__all__ = [\"RBFS\"]\r\n\r\n###\r\n"
			}
		],
		"id": "src/algorithms/rbfs.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "algorithms"
		}
	},
	{
		"name": "__init__.py",
		"path": "src/eda/__init__.py",
		"folderPath": "src/eda",
		"fileContent": "from .heuristics_cost import evaluate_heuristics_on_dataset\r\n",
		"documentation": "# __init__.py\n\n## Overview\nThe `__init__.py` file is a special file in Python. It is often used to initialize Python packages. The presence of this file in a directory indicates to the Python interpreter that the directory should be treated like a Python package. \n\nIn this specific `__init__.py` file, we are importing a function `evaluate_heuristics_on_dataset` from the `heuristics_cost` module. This allows the function to be called from the package level, improving the ease of access to this function.\n\n## Code Description\n\n### Import Statement\n```python\nfrom .heuristics_cost import evaluate_heuristics_on_dataset\n```\nThis line of code is importing the function `evaluate_heuristics_on_dataset` from the `heuristics_cost` module in the same directory (indicated by the dot before `heuristics_cost`). \n\n## Usage\n\nTo use the `evaluate_heuristics_on_dataset` function, you can import it from the package directly. Here is an example:\n\n```python\nfrom package_name import evaluate_heuristics_on_dataset\n\n# Use the function\nevaluate_heuristics_on_dataset(dataset)\n```\nIn the above example, replace `package_name` with the name of the package where this `__init__.py` file resides. Also, `dataset` should be replaced with the actual dataset you want to evaluate.\n\n## Function Description\n\n### evaluate_heuristics_on_dataset\nThis function is used to evaluate heuristics on a given dataset. The exact workings of this function are defined in the `heuristics_cost` module. \n\n## Note\nThe `__init__.py` file can be left empty if no initialization operation is required, or it can execute initialization code for the package, or it can set the `__all__` variable. But in this case, it is being used to conveniently import a function.",
		"isFolder": false,
		"updated": "2025-03-07T03:33:59.366Z",
		"sidebar_position": 0,
		"sidebar_label": "__init__.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/eda",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"__init__.py\"\r\nThe file name is: __init__.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .heuristics_cost import evaluate_heuristics_on_dataset\r\n\r\n###\r\n"
			}
		],
		"id": "src/eda/__init__.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "eda"
		}
	},
	{
		"name": "data_analysis.ipynb",
		"path": "src/eda/data_analysis.ipynb",
		"folderPath": "src/eda",
		"fileContent": "{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"# Import libraries\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\\n\",\r\n    \"\\n\",\r\n    \"font_scale = 2\\n\",\r\n    \"sns.set(font_scale=font_scale, font=\\\"SF Compact Text\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"# Import data\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df = pd.read_csv(\\\"../../data/input/fifteen-puzzle-6M.csv\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <th>5</th>\\n\",\r\n       \"      <th>6</th>\\n\",\r\n       \"      <th>7</th>\\n\",\r\n       \"      <th>8</th>\\n\",\r\n       \"      <th>9</th>\\n\",\r\n       \"      <th>10</th>\\n\",\r\n       \"      <th>11</th>\\n\",\r\n       \"      <th>12</th>\\n\",\r\n       \"      <th>13</th>\\n\",\r\n       \"      <th>14</th>\\n\",\r\n       \"      <th>15</th>\\n\",\r\n       \"      <th>cost</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>48</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>26</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>54</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>54</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>53</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>5999995</th>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>49</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>5999996</th>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>40</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>5999997</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>51</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>5999998</th>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>42</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>5999999</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>50</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>6000000 rows × 17 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"          0  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  cost\\n\",\r\n       \"0        10  1   5   4  14  11  15   7   0   9   3   2   6   8  12  13    48\\n\",\r\n       \"1         1  7  12   2   5   0   6   3   9   8  14   4  13  11  10  15    26\\n\",\r\n       \"2         6  9   4   1  13   0  12  10   7   5  11  14   3  15   8   2    54\\n\",\r\n       \"3        15  5   0   6   9   4   8  11  10  13   2   1  12   3  14   7    54\\n\",\r\n       \"4         6  7  12   4   0  15  11   3  13  10   1   5   9  14   8   2    53\\n\",\r\n       \"...      .. ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..   ...\\n\",\r\n       \"5999995  14  0   3   9   1  15  10   8   6   4  12   2   5   7  11  13    49\\n\",\r\n       \"5999996   2  3   5   9   8   0  11   4   6  15  14   7   1  13  10  12    40\\n\",\r\n       \"5999997   1  5  11   0   4  15   8  12   3   6  14   7  13   2  10   9    51\\n\",\r\n       \"5999998   9  4   0   8  14   6  12   7  11   2   1   3   5  13  10  15    42\\n\",\r\n       \"5999999   1  6   0  12   5   2  13   9   7   4  11  14  10   8   3  15    50\\n\",\r\n       \"\\n\",\r\n       \"[6000000 rows x 17 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 10,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 11,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"Index(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',\\n\",\r\n       \"       '13', '14', '15', 'cost'],\\n\",\r\n       \"      dtype='object')\"\r\n      ]\r\n     },\r\n     \"execution_count\": 11,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df.columns\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"# EDA\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"## Collected cost data\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 12,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"Maximum cost: 72\\n\",\r\n      \"Minimum cost: 0\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"print(\\\"Maximum cost:\\\", max(df[\\\"cost\\\"]))\\n\",\r\n    \"print(\\\"Minimum cost:\\\", min(df[\\\"cost\\\"]))\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 13,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"6000000\"\r\n      ]\r\n     },\r\n     \"execution_count\": 13,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"len(df)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 14,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>cost</th>\\n\",\r\n       \"      <th>frequency</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>149</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>452</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>1052</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>2353</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>4830</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>68</th>\\n\",\r\n       \"      <td>68</td>\\n\",\r\n       \"      <td>153</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>69</th>\\n\",\r\n       \"      <td>69</td>\\n\",\r\n       \"      <td>60</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>70</th>\\n\",\r\n       \"      <td>70</td>\\n\",\r\n       \"      <td>18</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>71</th>\\n\",\r\n       \"      <td>71</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>72</th>\\n\",\r\n       \"      <td>72</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>73 rows × 2 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    cost  frequency\\n\",\r\n       \"0      0        149\\n\",\r\n       \"1      1        452\\n\",\r\n       \"2      2       1052\\n\",\r\n       \"3      3       2353\\n\",\r\n       \"4      4       4830\\n\",\r\n       \"..   ...        ...\\n\",\r\n       \"68    68        153\\n\",\r\n       \"69    69         60\\n\",\r\n       \"70    70         18\\n\",\r\n       \"71    71         10\\n\",\r\n       \"72    72          2\\n\",\r\n       \"\\n\",\r\n       \"[73 rows x 2 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 14,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"cost = df[\\\"cost\\\"].value_counts().reset_index()\\n\",\r\n    \"cost.columns = [\\\"cost\\\", \\\"frequency\\\"]\\n\",\r\n    \"cost = cost.sort_values(by=\\\"cost\\\").reset_index(drop=True)\\n\",\r\n    \"\\n\",\r\n    \"cost\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 19,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"image/png\": \"\",\r\n      \"text/plain\": [\r\n       \"<Figure size 3000x1800 with 1 Axes>\"\r\n      ]\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"plt.figure(figsize=(10, 6), dpi=300)\\n\",\r\n    \"sns.barplot(\\n\",\r\n    \"    x=cost[\\\"cost\\\"], y=cost[\\\"frequency\\\"], hue=cost[\\\"cost\\\"], palette=\\\"viridis\\\", legend=False\\n\",\r\n    \")\\n\",\r\n    \"plt.xlabel(\\\"Cost\\\")\\n\",\r\n    \"plt.xlim(0, 80)\\n\",\r\n    \"plt.ylabel(\\\"Frequency\\\")\\n\",\r\n    \"plt.yscale(\\\"log\\\")\\n\",\r\n    \"\\n\",\r\n    \"plt.grid(True)\\n\",\r\n    \"plt.xticks(range(0, 81, 5))\\n\",\r\n    \"plt.tight_layout()\\n\",\r\n    \"\\n\",\r\n    \"# Save the figure as an image file\\n\",\r\n    \"plt.savefig(\\\"../../data/eda/collected_cost.png\\\", dpi=300)\\n\",\r\n    \"plt.show()\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# Find duplicate rows based on all columns and get unique 'cost' values\\n\",\r\n    \"duplicate_costs = df[df.duplicated(keep=False)][\\\"cost\\\"].unique()\\n\",\r\n    \"\\n\",\r\n    \"# Display the list of 'cost' values with duplicate rows\\n\",\r\n    \"print(sorted(duplicate_costs.tolist()))\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": [\r\n       \"5624433\"\r\n      ]\r\n     },\r\n     \"execution_count\": 10,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"df = df.drop_duplicates()\\n\",\r\n    \"len(df)\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 11,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>cost</th>\\n\",\r\n       \"      <th>frequency</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>24</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>68</th>\\n\",\r\n       \"      <td>68</td>\\n\",\r\n       \"      <td>153</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>69</th>\\n\",\r\n       \"      <td>69</td>\\n\",\r\n       \"      <td>60</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>70</th>\\n\",\r\n       \"      <td>70</td>\\n\",\r\n       \"      <td>18</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>71</th>\\n\",\r\n       \"      <td>71</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>72</th>\\n\",\r\n       \"      <td>72</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>73 rows × 2 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    cost  frequency\\n\",\r\n       \"0      0          1\\n\",\r\n       \"1      1          2\\n\",\r\n       \"2      2          4\\n\",\r\n       \"3      3         10\\n\",\r\n       \"4      4         24\\n\",\r\n       \"..   ...        ...\\n\",\r\n       \"68    68        153\\n\",\r\n       \"69    69         60\\n\",\r\n       \"70    70         18\\n\",\r\n       \"71    71         10\\n\",\r\n       \"72    72          2\\n\",\r\n       \"\\n\",\r\n       \"[73 rows x 2 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 11,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"cost = df[\\\"cost\\\"].value_counts().reset_index()\\n\",\r\n    \"cost.columns = [\\\"cost\\\", \\\"frequency\\\"]\\n\",\r\n    \"cost = cost.sort_values(by=\\\"cost\\\").reset_index(drop=True)\\n\",\r\n    \"\\n\",\r\n    \"cost\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"## Full cost frequency\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 21,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>cost</th>\\n\",\r\n       \"      <th>frequency</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>24</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>76</th>\\n\",\r\n       \"      <td>76</td>\\n\",\r\n       \"      <td>272198</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>77</th>\\n\",\r\n       \"      <td>77</td>\\n\",\r\n       \"      <td>26638</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>78</th>\\n\",\r\n       \"      <td>78</td>\\n\",\r\n       \"      <td>3406</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>79</th>\\n\",\r\n       \"      <td>79</td>\\n\",\r\n       \"      <td>70</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>80</th>\\n\",\r\n       \"      <td>80</td>\\n\",\r\n       \"      <td>17</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </tbody>\\n\",\r\n       \"</table>\\n\",\r\n       \"<p>81 rows × 2 columns</p>\\n\",\r\n       \"</div>\"\r\n      ],\r\n      \"text/plain\": [\r\n       \"    cost  frequency\\n\",\r\n       \"0      0          1\\n\",\r\n       \"1      1          2\\n\",\r\n       \"2      2          4\\n\",\r\n       \"3      3         10\\n\",\r\n       \"4      4         24\\n\",\r\n       \"..   ...        ...\\n\",\r\n       \"76    76     272198\\n\",\r\n       \"77    77      26638\\n\",\r\n       \"78    78       3406\\n\",\r\n       \"79    79         70\\n\",\r\n       \"80    80         17\\n\",\r\n       \"\\n\",\r\n       \"[81 rows x 2 columns]\"\r\n      ]\r\n     },\r\n     \"execution_count\": 21,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"cost_full = pd.read_csv(\\\"../../data/input/fifteen-puzzle-costs.csv\\\")\\n\",\r\n    \"cost_full\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 23,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"image/png\": \"\",\r\n      \"text/plain\": [\r\n       \"<Figure size 3000x1800 with 1 Axes>\"\r\n      ]\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"plt.figure(figsize=(10, 6), dpi=300)\\n\",\r\n    \"sns.barplot(\\n\",\r\n    \"    x=cost_full[\\\"cost\\\"],\\n\",\r\n    \"    y=cost_full[\\\"frequency\\\"],\\n\",\r\n    \"    hue=cost_full[\\\"cost\\\"],\\n\",\r\n    \"    palette=\\\"viridis\\\",\\n\",\r\n    \"    legend=False,\\n\",\r\n    \")\\n\",\r\n    \"plt.xlabel(\\\"Cost\\\")\\n\",\r\n    \"plt.xlim(0, 80)\\n\",\r\n    \"plt.ylabel(\\\"Frequency\\\")\\n\",\r\n    \"plt.yscale(\\\"log\\\")\\n\",\r\n    \"\\n\",\r\n    \"plt.grid(True)\\n\",\r\n    \"plt.xticks(range(0, 81, 5))\\n\",\r\n    \"plt.tight_layout()\\n\",\r\n    \"\\n\",\r\n    \"# Save the Seaborn-generated figure as an image file\\n\",\r\n    \"plt.savefig(\\\"../../data/eda/all_cost.png\\\", dpi=300)\\n\",\r\n    \"plt.show()\"\r\n   ]\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"sliding_puzzle\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.12.0\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 2\r\n}\r\n",
		"documentation": "# data_analysis.ipynb\n\n## Description\n\nThis Jupyter notebook, `data_analysis.ipynb`, is a Python script used for data analysis. It imports necessary libraries, loads a dataset, and displays the data. The script uses libraries such as pandas, matplotlib, and seaborn for data manipulation, analysis, and visualization.\n\n## Libraries\n\n### Import Libraries\n\nThe script begins by importing the necessary libraries:\n\n- `pandas`: This library is used for data manipulation and analysis. It is used in this script to load the dataset.\n- `matplotlib.pyplot`: This library is used for creating static, animated, and interactive visualizations in Python.\n- `seaborn`: This is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics.\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n## Data Import\n\nThe script then loads a dataset using the `pandas` library. The dataset is a CSV file named `fifteen-puzzle-6M.csv` located in the `../../data/input/` directory.\n\n```python\ndf = pd.read_csv(\"../../data/input/fifteen-puzzle-6M.csv\")\n```\n\n## Data Display\n\nThe script then displays the loaded data. The data is a DataFrame, a two-dimensional labeled data structure with columns of potentially different types. The DataFrame displays a preview of the first few entries in all columns.\n\n```python\ndf.head()\n```\n\n## Parameters\n\nThe script uses the following parameters:\n\n- `font_scale`: This parameter is used to scale the font size for the seaborn plots.\n- `font`: This parameter is used to set the font type for the seaborn plots.\n\n```python\nfont_scale = 2\nsns.set(font_scale=font_scale, font=\"SF Compact Text\")\n```\n\n## Note\n\nThis script does not include any non-standard technical concepts. All libraries and functions used are standard in the field of data analysis and visualization with Python.",
		"isFolder": false,
		"updated": "2025-03-07T03:34:15.473Z",
		"sidebar_position": 1,
		"sidebar_label": "data_analysis.ipynb",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/eda",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"data_analysis.ipynb\"\r\nThe file name is: data_analysis.ipynb\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"# Import libraries\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\\n\",\r\n    \"\\n\",\r\n    \"font_scale = 2\\n\",\r\n    \"sns.set(font_scale=font_scale, font=\\\"SF Compact Text\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"markdown\",\r\n   \"metadata\": {},\r\n   \"source\": [\r\n    \"# Import data\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df = pd.read_csv(\\\"../../data/input/fifteen-puzzle-6M.csv\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/html\": [\r\n       \"<div>\\n\",\r\n       \"<style scoped>\\n\",\r\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\r\n       \"        vertical-align: middle;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe tbody tr th {\\n\",\r\n       \"        vertical-align: top;\\n\",\r\n       \"    }\\n\",\r\n       \"\\n\",\r\n       \"    .dataframe thead th {\\n\",\r\n       \"        text-align: right;\\n\",\r\n       \"    }\\n\",\r\n       \"</style>\\n\",\r\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\r\n       \"  <thead>\\n\",\r\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\r\n       \"      <th></th>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <th>5</th>\\n\",\r\n       \"      <th>6</th>\\n\",\r\n       \"      <th>7</th>\\n\",\r\n       \"      <th>8</th>\\n\",\r\n       \"      <th>9</th>\\n\",\r\n       \"      <th>10</th>\\n\",\r\n       \"      <th>11</th>\\n\",\r\n       \"      <th>12</th>\\n\",\r\n       \"      <th>13</th>\\n\",\r\n       \"      <th>14</th>\\n\",\r\n       \"      <th>15</th>\\n\",\r\n       \"      <th>cost</th>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"  </thead>\\n\",\r\n       \"  <tbody>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>0</th>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>48</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>1</th>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>26</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>2</th>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>54</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>3</th>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>54</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>4</th>\\n\",\r\n       \"      <td>6</td>\\n\",\r\n       \"      <td>7</td>\\n\",\r\n       \"      <td>12</td>\\n\",\r\n       \"      <td>4</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>15</td>\\n\",\r\n       \"      <td>11</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"      <td>13</td>\\n\",\r\n       \"      <td>10</td>\\n\",\r\n       \"      <td>1</td>\\n\",\r\n       \"      <td>5</td>\\n\",\r\n       \"      <td>9</td>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>8</td>\\n\",\r\n       \"      <td>2</td>\\n\",\r\n       \"      <td>53</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>...</th>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"      <td>...</td>\\n\",\r\n       \"    </tr>\\n\",\r\n       \"    <tr>\\n\",\r\n       \"      <th>5999995</th>\\n\",\r\n       \"      <td>14</td>\\n\",\r\n       \"      <td>0</td>\\n\",\r\n       \"      <td>3</td>\\n\",\r\n       \"     "
			}
		],
		"id": "src/eda/data_analysis.ipynb",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "eda"
		}
	},
	{
		"name": "heuristics_cost.py",
		"path": "src/eda/heuristics_cost.py",
		"folderPath": "src/eda",
		"fileContent": "import pandas as pd\r\nfrom tqdm import tqdm\r\n\r\nfrom ..utils import create_scatterplot_and_save, make_dir\r\nfrom ..heuristics import manhattan_distance, mistile_distance\r\nfrom ..state import State\r\n\r\n\r\nnormal_state = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)\r\n\r\n\r\ndef _calculate_manhattan(row) -> int:\r\n    state_values = row[0:16].tolist()  # Extract values from columns 0 to 15\r\n    state = State(*state_values)\r\n    manhattan_estimation = manhattan_distance(state, normal_state)\r\n    return manhattan_estimation\r\n\r\n\r\ndef _calculate_mistile(row) -> int:\r\n    state_values = row[0:16].tolist()  # Extract values from columns 0 to 15\r\n    state = State(*state_values)\r\n    mistile_estimation = mistile_distance(state, normal_state)\r\n    return mistile_estimation\r\n\r\n\r\ndef evaluate_heuristics_on_dataset(\r\n    input_file_path: str, eda_folder_dir: str, n: int = 0\r\n) -> None:\r\n    make_dir(eda_folder_dir)\r\n\r\n    tqdm.pandas()\r\n\r\n    file_path = input_file_path\r\n\r\n    if n > 0:\r\n        df = pd.read_csv(file_path, nrows=n)\r\n    else:\r\n        df = pd.read_csv(file_path)\r\n\r\n    df = df.drop_duplicates()\r\n\r\n    df[\"manhattan_estimation\"] = df.progress_apply(_calculate_manhattan, axis=1)\r\n    df[\"mistile_estimation\"] = df.progress_apply(_calculate_mistile, axis=1)\r\n\r\n    df.drop(columns=list(str(i) for i in range(16)), inplace=True)\r\n\r\n    # Assuming df contains 'cost' and 'manhattan_estimation' columns\r\n    # Calculate residuals\r\n    df[\"manhattan_residual\"] = df[\"manhattan_estimation\"] - df[\"cost\"]\r\n    df[\"mistile_residual\"] = df[\"mistile_estimation\"] - df[\"cost\"]\r\n\r\n    output_file = eda_folder_dir + \"estimations.csv\"\r\n    df.to_csv(output_file)\r\n\r\n    # Create a residual plot\r\n    create_scatterplot_and_save(\r\n        df=df,\r\n        x=\"cost\",\r\n        y=\"manhattan_residual\",\r\n        file_path=eda_folder_dir + \"manhattan_residual_plot.png\",\r\n    )\r\n\r\n    create_scatterplot_and_save(\r\n        df=df,\r\n        x=\"cost\",\r\n        y=\"mistile_residual\",\r\n        file_path=eda_folder_dir + \"mistile_residual_plot.png\",\r\n    )\r\n\r\n    print(\"Done.\")\r\n",
		"documentation": "# heuristics_cost.py\n\n## Overview\nThe `heuristics_cost.py` file is a Python script that is used to evaluate heuristic functions on a dataset. The script uses two heuristic functions, Manhattan distance and Mistile distance, to estimate the cost of reaching a goal state from a given state in a 15-puzzle problem. The script reads a dataset from a CSV file, applies the heuristic functions to each state in the dataset, calculates the residuals, and saves the results to a new CSV file. It also creates and saves scatter plots of the residuals.\n\n## Dependencies\nThe script uses the following Python libraries:\n- pandas: for data manipulation and analysis\n- tqdm: for showing progress bars\n\nIt also uses the following modules from the same project:\n- utils: for creating scatter plots and directories\n- heuristics: for the Manhattan distance and Mistile distance functions\n- state: for the State class\n\n## Functions\n\n### _calculate_manhattan(row) -> int\nThis function calculates the Manhattan distance between a given state and the normal state. The state is represented by the first 16 values in the row.\n\nParameters:\n- row: A row from a pandas DataFrame. The first 16 values represent a state in the 15-puzzle problem.\n\nReturns:\n- The Manhattan distance between the given state and the normal state.\n\n### _calculate_mistile(row) -> int\nThis function calculates the Mistile distance between a given state and the normal state. The state is represented by the first 16 values in the row.\n\nParameters:\n- row: A row from a pandas DataFrame. The first 16 values represent a state in the 15-puzzle problem.\n\nReturns:\n- The Mistile distance between the given state and the normal state.\n\n### evaluate_heuristics_on_dataset(input_file_path: str, eda_folder_dir: str, n: int = 0) -> None\nThis function evaluates the Manhattan distance and Mistile distance heuristic functions on a dataset. The dataset is read from a CSV file. The function applies the heuristic functions to each state in the dataset, calculates the residuals, and saves the results to a new CSV file. It also creates and saves scatter plots of the residuals.\n\nParameters:\n- input_file_path: The path to the input CSV file.\n- eda_folder_dir: The directory where the output CSV file and scatter plots will be saved.\n- n: The number of rows to read from the input CSV file. If n is 0, all rows are read.\n\nReturns:\n- None\n\n## Usage\nTo use the `evaluate_heuristics_on_dataset` function, you need to provide the path to the input CSV file and the directory where the output CSV file and scatter plots will be saved. You can also optionally provide the number of rows to read from the input CSV file.\n\nExample:\n```python\nevaluate_heuristics_on_dataset('path/to/input.csv', 'path/to/output/directory/', 1000)\n```\n\nThis will read the first 1000 rows from `input.csv`, apply the heuristic functions to each state, calculate the residuals, save the results to `estimations.csv` in the output directory, and create scatter plots of the residuals.",
		"isFolder": false,
		"updated": "2025-03-07T03:34:38.850Z",
		"sidebar_position": 2,
		"sidebar_label": "heuristics_cost.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/eda",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"heuristics_cost.py\"\r\nThe file name is: heuristics_cost.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport pandas as pd\r\nfrom tqdm import tqdm\r\n\r\nfrom ..utils import create_scatterplot_and_save, make_dir\r\nfrom ..heuristics import manhattan_distance, mistile_distance\r\nfrom ..state import State\r\n\r\n\r\nnormal_state = State(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0)\r\n\r\n\r\ndef _calculate_manhattan(row) -> int:\r\n    state_values = row[0:16].tolist()  # Extract values from columns 0 to 15\r\n    state = State(*state_values)\r\n    manhattan_estimation = manhattan_distance(state, normal_state)\r\n    return manhattan_estimation\r\n\r\n\r\ndef _calculate_mistile(row) -> int:\r\n    state_values = row[0:16].tolist()  # Extract values from columns 0 to 15\r\n    state = State(*state_values)\r\n    mistile_estimation = mistile_distance(state, normal_state)\r\n    return mistile_estimation\r\n\r\n\r\ndef evaluate_heuristics_on_dataset(\r\n    input_file_path: str, eda_folder_dir: str, n: int = 0\r\n) -> None:\r\n    make_dir(eda_folder_dir)\r\n\r\n    tqdm.pandas()\r\n\r\n    file_path = input_file_path\r\n\r\n    if n > 0:\r\n        df = pd.read_csv(file_path, nrows=n)\r\n    else:\r\n        df = pd.read_csv(file_path)\r\n\r\n    df = df.drop_duplicates()\r\n\r\n    df[\"manhattan_estimation\"] = df.progress_apply(_calculate_manhattan, axis=1)\r\n    df[\"mistile_estimation\"] = df.progress_apply(_calculate_mistile, axis=1)\r\n\r\n    df.drop(columns=list(str(i) for i in range(16)), inplace=True)\r\n\r\n    # Assuming df contains 'cost' and 'manhattan_estimation' columns\r\n    # Calculate residuals\r\n    df[\"manhattan_residual\"] = df[\"manhattan_estimation\"] - df[\"cost\"]\r\n    df[\"mistile_residual\"] = df[\"mistile_estimation\"] - df[\"cost\"]\r\n\r\n    output_file = eda_folder_dir + \"estimations.csv\"\r\n    df.to_csv(output_file)\r\n\r\n    # Create a residual plot\r\n    create_scatterplot_and_save(\r\n        df=df,\r\n        x=\"cost\",\r\n        y=\"manhattan_residual\",\r\n        file_path=eda_folder_dir + \"manhattan_residual_plot.png\",\r\n    )\r\n\r\n    create_scatterplot_and_save(\r\n        df=df,\r\n        x=\"cost\",\r\n        y=\"mistile_residual\",\r\n        file_path=eda_folder_dir + \"mistile_residual_plot.png\",\r\n    )\r\n\r\n    print(\"Done.\")\r\n\r\n###\r\n"
			}
		],
		"id": "src/eda/heuristics_cost.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "eda"
		}
	},
	{
		"name": "viewer.ipynb",
		"path": "src/eda/viewer.ipynb",
		"folderPath": "src/eda",
		"fileContent": "{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 4,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plt.rcParams[\\\"font.family\\\"] = \\\"SF Compact Text\\\"\\n\",\r\n    \"font_scale = 2\\n\",\r\n    \"sns.set(font_scale=font_scale, font=\\\"SF Compact Text\\\")\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 6,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df = pd.read_csv(\\\"experiment1_results.csv\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"image/png\": \"\",\r\n      \"text/plain\": [\r\n       \"<Figure size 800x600 with 1 Axes>\"\r\n      ]\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# Assuming 'cost' and 'predicted_cost' are columns in your DataFrame\\n\",\r\n    \"cost_values = df[\\\"cost\\\"]\\n\",\r\n    \"predicted_cost_values = df[\\\"predicted_cost\\\"]\\n\",\r\n    \"\\n\",\r\n    \"# Calculate the counts for different relationships between cost and predicted_cost\\n\",\r\n    \"matches = sum(cost_values == predicted_cost_values)\\n\",\r\n    \"underestimations = sum(cost_values != predicted_cost_values)\\n\",\r\n    \"\\n\",\r\n    \"# Pie chart data and labels\\n\",\r\n    \"labels = [\\\"Matches\\\", \\\"Wrongs\\\"]\\n\",\r\n    \"sizes = [matches, underestimations]\\n\",\r\n    \"colors = [\\\"gold\\\", \\\"lightcoral\\\"]\\n\",\r\n    \"\\n\",\r\n    \"# Plotting the pie chart using Matplotlib with Seaborn's style\\n\",\r\n    \"sns.set(font_scale=2, style=\\\"whitegrid\\\", font=\\\"SF Compact Text\\\")\\n\",\r\n    \"plt.figure(figsize=(8, 6))\\n\",\r\n    \"plt.pie(sizes, labels=labels, colors=colors, autopct=\\\"%1.1f%%\\\", startangle=140)\\n\",\r\n    \"plt.axis(\\\"equal\\\")  # Equal aspect ratio ensures that pie is drawn as a circle.\\n\",\r\n    \"plt.tight_layout()  # Apply tight layout\\n\",\r\n    \"plt.savefig(\\\"cost_predicted_cost_pie.png\\\", dpi=300)  # Export the plot\\n\",\r\n    \"plt.show()\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 14,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stderr\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"/var/folders/7l/8dt2fvys1b75lrc4gj_0dfb40000gn/T/ipykernel_89632/2830556932.py:9: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\\n\",\r\n      \"  average_error = df.groupby(\\\"cost_bins\\\")[\\\"error\\\"].mean().reset_index()\\n\",\r\n      \"/var/folders/7l/8dt2fvys1b75lrc4gj_0dfb40000gn/T/ipykernel_89632/2830556932.py:13: FutureWarning: \\n\",\r\n      \"\\n\",\r\n      \"Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\\n\",\r\n      \"\\n\",\r\n      \"  sns.barplot(x=\\\"cost_bins\\\", y=\\\"error\\\", data=average_error, palette=\\\"viridis\\\")\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"data\": {\r\n      \"image/png\": \"\",\r\n      \"text/plain\": [\r\n       \"<Figure size 1000x800 with 1 Axes>\"\r\n      ]\r\n     },\r\n     \"metadata\": {},\r\n     \"output_type\": \"display_data\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"# Assuming 'cost' and 'predicted_cost' are columns in your DataFrame\\n\",\r\n    \"bins = pd.cut(df[\\\"cost\\\"], bins=range(0, max(df[\\\"cost\\\"]) + 6, 5), right=False)\\n\",\r\n    \"df[\\\"cost_bins\\\"] = bins\\n\",\r\n    \"\\n\",\r\n    \"# Calculating the error between 'cost' and 'predicted_cost'\\n\",\r\n    \"df[\\\"error\\\"] = df[\\\"predicted_cost\\\"] - df[\\\"cost\\\"]\\n\",\r\n    \"\\n\",\r\n    \"# Grouping by 'cost_bins' and calculating average error for each bin\\n\",\r\n    \"average_error = df.groupby(\\\"cost_bins\\\")[\\\"error\\\"].mean().reset_index()\\n\",\r\n    \"\\n\",\r\n    \"# Plotting using Seaborn\\n\",\r\n    \"plt.figure(figsize=(10, 8))\\n\",\r\n    \"sns.barplot(x=\\\"cost_bins\\\", y=\\\"error\\\", data=average_error, palette=\\\"viridis\\\")\\n\",\r\n    \"plt.xlabel(\\\"Cost Bins (Interval of 5)\\\")\\n\",\r\n    \"plt.ylabel(\\\"Average Error\\\")\\n\",\r\n    \"plt.xticks(rotation=45)\\n\",\r\n    \"plt.tight_layout()\\n\",\r\n    \"plt.savefig(\\\"average_error.png\\\", dpi=300)  # Export the plot\\n\",\r\n    \"\\n\",\r\n    \"plt.show()\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": []\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"sliding_puzzle\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 3\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython3\",\r\n   \"version\": \"3.12.0\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 2\r\n}\r\n",
		"documentation": "# viewer.ipynb\n\nThis Jupyter notebook file, `viewer.ipynb`, is a Python script that imports the necessary libraries and reads a CSV file into a pandas DataFrame. It then sets some parameters for the matplotlib and seaborn libraries for data visualization. \n\n## Code Description\n\nThe code in this file is divided into several cells, each performing a specific task. \n\n### Importing Libraries\n\nThe first cell imports the necessary libraries for the script:\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n\n`pandas` is a data manipulation and analysis library, `matplotlib` is a plotting library, and `seaborn` is a statistical data visualization library based on `matplotlib`.\n\n### Setting Plot Parameters\n\nThe second cell sets some parameters for the plots that will be created later in the script:\n\n```python\nplt.rcParams[\"font.family\"] = \"SF Compact Text\"\nfont_scale = 2\nsns.set(font_scale=font_scale, font=\"SF Compact Text\")\n```\n\nThis sets the font for the plots to \"SF Compact Text\" and the font scale to 2.\n\n### Reading the Data\n\nThe third cell reads a CSV file into a pandas DataFrame:\n\n```python\ndf = pd.read_csv(\"experiment1_results.csv\")\n```\n\nThis creates a DataFrame `df` from the data in the file `experiment1_results.csv`.\n\n### Data Visualization\n\nThe fourth cell seems to be creating a plot from the data in `df`, but the code is not shown in the provided content.\n\n## Parameters\n\nThe script does not define any functions, so there are no parameters to describe.\n\n## Non-standard Concepts\n\nThe script uses the `plt.rcParams` and `sns.set` functions to set parameters for the plots. These are specific to the `matplotlib` and `seaborn` libraries, respectively, and may not be familiar to those who have not used these libraries before.\n\n## Template Variables\n\nThis script does not appear to be a template file, so there are no template variables to list.\n\n## File Display\n\nThe content of the file is a JSON object that defines a Jupyter notebook. The main components are the \"cells\", which contain the code and its outputs. Each cell has several properties, including its type (\"code\" for a code cell), its execution count, and its source code. The \"outputs\" property would contain any output from the code, but in this case, all the \"outputs\" properties are empty.",
		"isFolder": false,
		"updated": "2025-03-07T03:35:01.051Z",
		"sidebar_position": 3,
		"sidebar_label": "viewer.ipynb",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/eda",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"viewer.ipynb\"\r\nThe file name is: viewer.ipynb\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 4,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import pandas as pd\\n\",\r\n    \"\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import seaborn as sns\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"plt.rcParams[\\\"font.family\\\"] = \\\"SF Compact Text\\\"\\n\",\r\n    \"font_scale = 2\\n\",\r\n    \"sns.set(font_scale=font_scale, font=\\\"SF Compact Text\\\")\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 6,\r\n   \"metadata\": {},\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"df = pd.read_csv(\\\"experiment1_results.csv\\\")\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"metadata\": {},\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAvMAAAIjCAYAAACOO5T4AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8g+/7EAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB8n0lEQVR4nO3dd3yV9d3G8c999smezIQ9RYYoshwobnHjAnEDrda2djy1w6KtfTofW/u0tvq01bonbtyIigMclSkr7BBmErJz1v38cZJDAkkI5CT3Gdf79fLVkJycc8WeyHV+5/v73YZpmiYiIiIiIhJ3bFYHEBERERGRo6MyLyIiIiISp1TmRURERETilMq8iIiIiEicUpkXEREREYlTKvMiIiIiInFKZV5EREREJE6pzIuIiIiIxCmVeRERERGROKUyLyIiIiISp1TmRURERETilMq8iIiIiEicUpkXEREREYlTKvMiIiIiInFKZV5EREREJE6pzIuIiIiIxCmVeRERERGROKUyLyIiIiISp1TmRURERETilMq8iIiIiEicUpkXEREREYlTKvMiIiIiInFKZV5EREREJE6pzIuIiIiIxCmVeRERERGROKUyLyIiIiISp1TmRURERETilMq8iIiIiEicUpkXEREREYlTKvMiIiIiInFKZV5EREREJE6pzIuIiIiIxCmH1QFERKRtZjAIpgmGAYaBYWt9HcY0TfD7MX0+zLo6zPp6zLq68PfbbOHvtdnC92W3YxjGgT83fK3Z5xo+NpxODJfr0McLhcL3DYfNJiIi0acyLyJiMTMYBMCw2w98LhTCrKwkVFZGqLy8WTE36+uhvj785yafM+vrwefrvKB2O4bXi5GaipGSgi0lBSMlJfJnIyUFW2pq+M+pqRgeT7Nyb5omhEIHXjCIiEiHGabZuKQiIiKdocWyHgweKOsNhb3pP2ZV1YEV73jmdodLf0YGttxc7Lm52HJzseXnY8vMjPw7iazwq+iLiBwRlXkRkShpXHmOFNRgkNDu3QR37jyksCdMWe8Iw8CWlRUu9w3/2PPywkU/LS1yMzMY1AiPiEgrVOZFRI7CIcXd7ye4cyfBHTsIlpQQLCkhtHdveKxEjpzTiS0n58Bqfn4+joICbNnZQMNKPqjgi0jSU5kXETmMQ4p7XR2BHTsINZT2YEkJodJSi1MmCY8He8+eOHr3xt6rF/bCwsgqvhkMakxHRJKOyryIyEFM0wTTxLDZMH0+Alu3EiwuDhf3nTsx9++3OqI0YaSlYe/dG0dhIfZ+/bD36IFht2v1XkSSgsq8iAjhVd3GAhgsLiawYQOBjRsJ7tihUZl4Y7eHV+379MHR8I/h8YTLvWFo5V5EEorKvIgkpcbyDhDcsydS3gNbtoDfb3E6iTZbt244Bg/GOXQo9t69w++6NHkOiIjEK5V5EUkKTVdlQ5WVB8r7pk2Y1dVWx5Ou5PHgHDgwXO6HDMHwerVqLyJxS2VeRBJWZHTG5wsX94Z/Qvv2WR1NYoVhYO/VC8eQIeFV++7dm+2ZEBGJdSrzIpJQIgW+rg7/6tX4V68msGmT5t6lXYy0tMiKvWPgQAynU+M4IhLTVOZFJO41lq1QbS3+Vavwr15NcMsWFXjpGLsde58+OIcMwTliBLb0dBV7EYk5KvMiEpearsD7Vq7Ev3Ilwa1bdVVV6RyGgb1fP1yjRuEcMSK8Yh8KaRRHRCynMi8icaOxPJl+P/41a/CvWEGgqEgr8NK1nE6cw4fjGjMGe79+4ReQ2jwrIhZRmReRmNa4GREgUFSEf/ly/GvX6vhIiQlGRgaukSNxHncc9txcjeGISJdTmReRmNS4Ch8qL6d+6VL8y5Zh1tRYHUukVfZevXCOHo1z1ChsHo+KvYh0CZV5EYkpjed9B4qK8C1ZQmDDBqsjiRwZmw3H4MG4xozBMXgwNMzVawxHRDqDyryIWK6xwFNfj+/LL/F9/jmhsjKrY4l0mOH14hw9GvfEidgyMrRpVkSiTmVeRCzTOIYQ3LWL+k8/xb9yJQQCVscSiT7DwDF8OO7Jk3H06qURHBGJGpV5EelSkQ2tpol/1Sp8n31GcPt2q2OJdBl7QQHuSZNwDBumK82KSIepzItIl4hsaK2sxLd0Kb4vv9SGVklqRlYW7gkTcI0dC3a7jrcUkaOiMi8inaqxxAd27KD+ww8JrF2rCzuJNOXx4Bo7NjxXn5amuXoROSIq8yLSKRoLSXDHDuoWLgxf3ElEWmez4RwxAvfkydi7d9dcvYi0i8q8iERVsxL/3ns6WlLkKNj79sU9aRLOIUNU6kWkTSrzIhIVKvEi0Wfr0QPP1Kk4Bw3S+I2ItEhlXkQ6JFLiS0rC4zQq8SJRZ+/bF8+ZZ+Lo3VulXkSaUZkXkaPSrMS/9x6B9eutjiSS8BxDh+I54wzseXmYpqnTb0REZV5EjoxKvIjFDAPnqFF4Tj8dIz294VMq9SLJSmVeRNqlcRUwuGsXde++qxIvYjW7HdcJJ+A+9VQMt1ujNyJJSmVeRA7LDIUw6+upe/tt/P/5j9VxRKQplwv3hAm4TzoJ7HaVepEkozIvIq0yg0EwDHyffUbdokVQV2d1JBFphZGSgvvkk3GNGxe+mqxKvUhSUJkXkUM0jtQEtmyhdsECQrt3Wx1JRNrJyMzEc/rpuEaN0sk3IklAZV5EmjFDIczqaureeAP/6tVWxxGRo2Tv1w/vBRdgy87WBlmRBKYyLyJAw0gNUP/RR9QvXgx+v8WJRKTD7HbcJ52E++STAXQlWZEEpDIvkuQa34b3r1tH3RtvECorszqSiESZLScH7wUX4OjXT+fTiyQYlXmRJGaaJqHycuoWLNCVW0WSgHPUKDznnKOjLEUSiMq8SBIyg0EIhah7/318n34KDSM2IpL4DI8Hz5ln4ho7VhtkRRKAyrxIEomcUrN5MzUvvIBZUWF1JBGxiL2wEO+FF2LLzdXYjUgcU5kXSRJmMAimSd3bb+NbutTqOCISC2w23JMm4T711PDZ9NogKxJ3VOZFkoBpmgRLSqh9/nlCpaVWxxGRGGNkZeGdNg3nwIHaICsSZ1TmRRKYGQoBUL9oUfi4Sf26i0gbnKNH4z3/fLDZtEovEidU5kUSlGmahPbupWb+fEI7d1odR0TihC07m5Tp07H17KkVepE4oDIvkmDMUAgMA9/HH1P33ns6qUZEjpzNhvu003BPngymqRNvRGKYyrxIAjFDIcyKCmrmzye4bZvVcUQkztn79SPlssswUlJU6EVilMq8SAJoPCu6/vPPqXvrLfD7rY4kIgnC8HrxXnQRzqFDtTlWJAapzIvEOTMUwqypofbFFwkUFVkdR0QSlOv44/Gcc46OsBSJMSrzInHMNE0CGzZQO38+Zl2d1XFEJMHZ8vNJufzy8IWmNHYjEhNU5kXiUONb3XWLFlH//vtWxxGRZGK34znzTNzjx0dG/ETEOirzInHGDAYhEKDm+ecJrF9vdRwRSVKOwYPxXnIJhsulsRsRC6nMi8QRMxQitG8fNU89pSu5iojljLQ0Ui69FHu/ftoYK2IRlXmROOJbtYral17SaTUiEjsMA8/ZZ4fHbnTajUiXU5kXiXFmKARA3dtv4/v0U4vTiIi0zDl2LN7zzwfQHL1IF1KZF4lhZjCI6fNR88wzBDdvtjqOiEib7H37knrVVeB0ao5epIuozIvEKDMUIrhzJzVPP41ZUWF1HBGRdrFlZ5MyYwa2nByt0It0AZV5kRjTOHPq+/JLahcsgGDQ6kgiIkfG5SLl8stxDByoGXqRTqYyLxJDzFAITJPaBQvwf/ml1XFERI6eYeA54wzckyZpY6xIJ1KZF4kRkfn4J54guH271XFERKLCOWYM3mnTwDA0diPSCVTmRWKAGQxiVldT/cgjhPbtszqOiEhU2QsLSbn6al1gSqQTqMyLWKzxQlDVjz6KWVlpdRwRkU5hZGaSOnMmttxcrdCLRJHKvIiFzFCIYHEx1U88AXV1VscREelcTicpl12GY8gQzdCLRInKvIhFTNMksG4dNc89B4GA1XFERLqM59xzcZ94otUxRBKCyryIRXxffkntq6+CfgVFJAm5p0zBc+qpVscQiXsq8yIWqPvgA+rfe8/qGCIilnKNH4/3nHN0dKVIB6jMi3SRxl+1utdfx/fZZxanERGJDc7Ro/FeeCGANsaKHAWVeZEuELkY1Pz5+FevtjqOiEhMcQwdSsrll+ssepGjoDIv0snMUAgCAaqffJLg5s1WxxERiUn2fv1InTED7HYVepEjoDIv0onMYBCzvp7qRx8ltHOn1XFERGKavbCQ1GuuAYdDhV6knVTmRTqJGQph1tZS/a9/ESottTqOiEhcsPfqReq114LTqUIv0g76LRHpBGYoFF6Rf/hhFXkRkSMQ3LGDqocfBp8vPKYoIm1SmReJMjMUAp+P6n//m9DevVbHERGJO6GdO6l66CHM+noVepHDUJkXiaLIZtdHHyW0a5fVcURE4lZo926q//UvzNpazGDQ6jgiMUtlXiRKzFAIgkGqH3uM4I4dVscREYl7ob17qdYKvUibVOZFosA0TQiFqH7iCYLbtlkdR0QkYYT27aP60UchEFChF2mByrxIBzUW+Zqnn9Y58iIinSC0cyfVTz4JpokO4RNpTmVepANM0wTTpOa55whs2GB1HBGRhBXcvJma554DUKEXaUJlXuQoNf5lUjt/PoE1ayxOIyKS+AJr1lD7yisYhmF1FJGYoTIvcpQMw6D2pZfwr1pldRQRkaTh/89/qHv3XatjiMQMlXmRo1T72mv4ly2zOoaISNKpX7yY+k8+0biNCCrzIkel9s038X3+udUxRESSVt1bb+FfsUKFXpKeyrzIETBNk/qPPsL36adWRxERSXq1L71EYMMGHVkpSU1lXqSdzFCIwJo11L3zjtVRREQEwscCP/MMwR07VOglaanMi7SDGQwS3LmTmvnzrY4iIiJNBQJUP/44oX37MINBq9OIdDmVeZHDMEMhzKoqap54AgIBq+OIiMjB6uqofuQRzKoqFXpJOirzIm0wQyHw+6l+7DHM6mqr44iISCvMqiqqH3kEAgGN3"
			}
		],
		"id": "src/eda/viewer.ipynb",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "eda"
		}
	},
	{
		"name": "__init__.py",
		"path": "src/experiments/__init__.py",
		"folderPath": "src/experiments",
		"fileContent": "from .overestimation_exp import conduct_overestimation_experiment\r\nfrom .algorithm_exp import conduct_algorithm_experiment\r\nfrom .exp_dataset import make_exp_dataset\r\n",
		"documentation": "# __init__.py\n\n## Overview\nThe `__init__.py` file is a special file in Python that allows a directory to become a Python package, meaning it can be imported as a module. In the simplest case, `__init__.py` can just be an empty file, but it can also execute initialization code for the package or set the `__all__` variable.\n\nIn this specific `__init__.py` file, we are importing several functions from other modules in the same package. These functions are `conduct_overestimation_experiment`, `conduct_algorithm_experiment`, and `make_exp_dataset`.\n\n## Functions\n\n### conduct_overestimation_experiment\nThis function is imported from the `overestimation_exp` module. It is used to conduct an overestimation experiment. The specific parameters and usage of this function will depend on its definition in the `overestimation_exp` module.\n\n### conduct_algorithm_experiment\nThis function is imported from the `algorithm_exp` module. It is used to conduct an algorithm experiment. The specific parameters and usage of this function will depend on its definition in the `algorithm_exp` module.\n\n### make_exp_dataset\nThis function is imported from the `exp_dataset` module. It is used to create an experiment dataset. The specific parameters and usage of this function will depend on its definition in the `exp_dataset` module.\n\n## Usage\nTo use these functions, you would first import the package that contains this `__init__.py` file, and then call the functions as methods of the package. For example:\n\n```python\nimport mypackage\n\nmypackage.conduct_overestimation_experiment()\nmypackage.conduct_algorithm_experiment()\nmypackage.make_exp_dataset()\n```\n\nNote that `mypackage` should be replaced with the actual name of your package.",
		"isFolder": false,
		"updated": "2025-03-07T03:35:15.311Z",
		"sidebar_position": 0,
		"sidebar_label": "__init__.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/experiments",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"__init__.py\"\r\nThe file name is: __init__.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .overestimation_exp import conduct_overestimation_experiment\r\nfrom .algorithm_exp import conduct_algorithm_experiment\r\nfrom .exp_dataset import make_exp_dataset\r\n\r\n###\r\n"
			}
		],
		"id": "src/experiments/__init__.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "experiments"
		}
	},
	{
		"name": "algorithm_exp.py",
		"path": "src/experiments/algorithm_exp.py",
		"folderPath": "src/experiments",
		"fileContent": "import pandas as pd\r\nfrom tqdm import tqdm\r\n\r\nfrom multiprocessing import Pool\r\nfrom functools import partial\r\nimport numpy as np\r\n\r\nfrom ..algorithms.abstract_search import InformedSearchAlgorithm\r\nfrom ..game_config import GameConfig\r\nfrom ..state import State\r\nfrom ..algorithms import AStar, GBFS\r\nfrom ..heuristics import CallableHeuristicClass, manhattan_distance, ann_distance\r\nfrom ..game import Game, ResultRecord\r\n\r\n\r\ndef play_on_one(\r\n    start_board: list[int], algorithm: InformedSearchAlgorithm, heuristic_func\r\n) -> ResultRecord:\r\n    game_config = GameConfig(\r\n        start_state=State(*start_board),\r\n    )\r\n    algorithm_instance = algorithm(heuristic=heuristic_func)\r\n    g = Game(game_config=game_config, algorithm=algorithm_instance, ignore_solvability=False)\r\n\r\n    result_record = g.play()\r\n    return result_record\r\n\r\n\r\ndef conduct_algorithm_heuristic_experiment(\r\n    df: pd.DataFrame,\r\n    algorithm: InformedSearchAlgorithm,\r\n    heuristic: CallableHeuristicClass,\r\n    experiment_folder_path: str,\r\n) -> pd.DataFrame:\r\n    for index, row in tqdm(df.iterrows(), total=len(df), desc=\"Processing rows\"):\r\n        start_board = row[:16].tolist()\r\n        result = play_on_one(start_board, algorithm, heuristic)\r\n\r\n        # Update DataFrame with the obtained results\r\n        df.at[index, \"path_length\"] = result.path_length\r\n        df.at[index, \"time_cp\"] = result.time_cp\r\n        df.at[index, \"space_cp\"] = result.space_cp\r\n        df.at[index, \"time\"] = result.time\r\n\r\n    df.to_csv(\r\n        experiment_folder_path\r\n        + \"algorithm_exp\"\r\n        + \"_\"\r\n        + algorithm.__class__.__name__\r\n        + \"_\"\r\n        + heuristic.__class__.__name__\r\n        + \".csv\"\r\n    )\r\n\r\n    return df\r\n\r\n\r\ndef conduct_algorithm_heuristic_experiment_(\r\n    df: pd.DataFrame,\r\n    algorithm: InformedSearchAlgorithm,\r\n    heuristic: CallableHeuristicClass,\r\n) -> pd.DataFrame:\r\n    for index, row in tqdm(df.iterrows(), total=len(df), desc=\"Processing rows\"):\r\n        start_board = row[:16].tolist()\r\n        result = play_on_one(start_board, algorithm, heuristic)\r\n\r\n        # Update DataFrame with the obtained results\r\n        df.at[index, \"path_length\"] = result.path_length\r\n        df.at[index, \"time_cp\"] = result.time_cp\r\n        df.at[index, \"space_cp\"] = result.space_cp\r\n        df.at[index, \"time\"] = result.time\r\n    return df\r\n\r\n\r\ndef experiment_on_part(experiment_folder_path, part) -> pd.DataFrame:\r\n    result = conduct_algorithm_heuristic_experiment_(part[1], GBFS, manhattan_distance)\r\n    return result\r\n\r\n\r\ndef conduct_algorithm_experiment(\r\n    experiment_data_path: str,\r\n    experiment_folder_path: str,\r\n    n: int = 0,\r\n) -> None:\r\n    if n > 0:\r\n        df = pd.read_csv(experiment_data_path, nrows=n)\r\n    else:\r\n        df = pd.read_csv(experiment_data_path)\r\n\r\n    df = df.sample(frac=1, random_state=42).reset_index(drop=True)\r\n\r\n    # Split the DataFrame into six parts\r\n    df_parts = np.array_split(df, 6)\r\n\r\n    # Create a partial function with experiment_folder_path\r\n    partial_experiment = partial(experiment_on_part, experiment_folder_path)\r\n\r\n    # Create a pool of processes\r\n    with Pool(processes=6) as pool:\r\n        # Run each part concurrently\r\n        results = pool.map(partial_experiment, enumerate(df_parts))\r\n\r\n    merged_df = pd.concat(results, ignore_index=True)\r\n\r\n    merged_df.to_csv(\r\n        experiment_folder_path\r\n        + \"algorithm_exp\"\r\n        + \"_\"\r\n        + \"GBFS\"\r\n        + \"_\"\r\n        + \"manhattan_distance\"\r\n        + \".csv\"\r\n    )\r\n\r\n\r\n# def conduct_algorithm_experiment(\r\n#     experiment_data_path: str,\r\n#     experiment_folder_path: str,\r\n#     n: int = 0,\r\n# ):\r\n#     if n > 0:\r\n#         df = pd.read_csv(experiment_data_path, nrows=n)\r\n#     else:\r\n#         df = pd.read_csv(experiment_data_path)\r\n\r\n#     conduct_algorithm_heuristic_experiment(df, GBFS, ann_distance, experiment_folder_path)\r\n",
		"documentation": "# algorithm_exp.py\n\nThis Python script, `algorithm_exp.py`, is used to conduct experiments on different search algorithms and heuristics. It uses the pandas library to handle data, tqdm for progress bars, and multiprocessing for parallel processing. The script imports several classes and functions from other modules, including `InformedSearchAlgorithm`, `GameConfig`, `State`, `AStar`, `GBFS`, `CallableHeuristicClass`, `manhattan_distance`, `ann_distance`, `Game`, and `ResultRecord`.\n\n## Functions\n\n### play_on_one\n\n```python\ndef play_on_one(\n    start_board: list[int], algorithm: InformedSearchAlgorithm, heuristic_func\n) -> ResultRecord:\n```\n\nThis function takes a starting board configuration, a search algorithm, and a heuristic function as input. It creates a game configuration with the starting state, initializes the algorithm with the heuristic, and creates a game instance. The game is then played, and the result is returned.\n\nParameters:\n- `start_board`: A list of integers representing the starting board configuration.\n- `algorithm`: An instance of `InformedSearchAlgorithm` to be used for the game.\n- `heuristic_func`: A heuristic function to be used by the algorithm.\n\nReturns:\n- `ResultRecord`: A record of the game result.\n\n### conduct_algorithm_heuristic_experiment\n\n```python\ndef conduct_algorithm_heuristic_experiment(\n    df: pd.DataFrame,\n    algorithm: InformedSearchAlgorithm,\n    heuristic: CallableHeuristicClass,\n    experiment_folder_path: str,\n) -> pd.DataFrame:\n```\n\nThis function iterates over each row of a DataFrame, plays a game with the given algorithm and heuristic, and updates the DataFrame with the results. The updated DataFrame is then saved as a CSV file in the specified folder.\n\nParameters:\n- `df`: A pandas DataFrame containing the data for the experiment.\n- `algorithm`: An instance of `InformedSearchAlgorithm` to be used for the game.\n- `heuristic`: An instance of `CallableHeuristicClass` to be used by the algorithm.\n- `experiment_folder_path`: A string representing the path to the folder where the experiment results will be saved.\n\nReturns:\n- `pd.DataFrame`: The updated DataFrame.\n\n### conduct_algorithm_heuristic_experiment_\n\n```python\ndef conduct_algorithm_heuristic_experiment_(\n    df: pd.DataFrame,\n    algorithm: InformedSearchAlgorithm,\n    heuristic: CallableHeuristicClass,\n) -> pd.DataFrame:\n```\n\nThis function is similar to `conduct_algorithm_heuristic_experiment`, but it does not save the results to a CSV file.\n\n### experiment_on_part\n\n```python\ndef experiment_on_part(experiment_folder_path, part) -> pd.DataFrame:\n```\n\nThis function conducts an experiment on a part of the data using the GBFS algorithm and the manhattan distance heuristic. It returns the updated DataFrame.\n\nParameters:\n- `experiment_folder_path`: A string representing the path to the folder where the experiment results will be saved.\n- `part`: A part of the data on which the experiment will be conducted.\n\nReturns:\n- `pd.DataFrame`: The updated DataFrame.\n\n### conduct_algorithm_experiment\n\n```python\ndef conduct_algorithm_experiment(\n    experiment_data_path: str,\n    experiment_folder_path: str,\n    n: int = 0,\n) -> None:\n```\n\nThis function reads the experiment data from a CSV file, shuffles it, splits it into six parts, and conducts an experiment on each part concurrently using the GBFS algorithm and the manhattan distance heuristic. The results are then merged and saved as a CSV file.\n\nParameters:\n- `experiment_data_path`: A string representing the path to the CSV file containing the experiment data.\n- `experiment_folder_path`: A string representing the path to the folder where the experiment results will be saved.\n- `n`: An integer representing the number of rows to read from the CSV file. If `n` is 0, all rows are read.\n\nReturns:\n- None",
		"isFolder": false,
		"updated": "2025-03-07T03:35:46.173Z",
		"sidebar_position": 1,
		"sidebar_label": "algorithm_exp.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/experiments",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"algorithm_exp.py\"\r\nThe file name is: algorithm_exp.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport pandas as pd\r\nfrom tqdm import tqdm\r\n\r\nfrom multiprocessing import Pool\r\nfrom functools import partial\r\nimport numpy as np\r\n\r\nfrom ..algorithms.abstract_search import InformedSearchAlgorithm\r\nfrom ..game_config import GameConfig\r\nfrom ..state import State\r\nfrom ..algorithms import AStar, GBFS\r\nfrom ..heuristics import CallableHeuristicClass, manhattan_distance, ann_distance\r\nfrom ..game import Game, ResultRecord\r\n\r\n\r\ndef play_on_one(\r\n    start_board: list[int], algorithm: InformedSearchAlgorithm, heuristic_func\r\n) -> ResultRecord:\r\n    game_config = GameConfig(\r\n        start_state=State(*start_board),\r\n    )\r\n    algorithm_instance = algorithm(heuristic=heuristic_func)\r\n    g = Game(game_config=game_config, algorithm=algorithm_instance, ignore_solvability=False)\r\n\r\n    result_record = g.play()\r\n    return result_record\r\n\r\n\r\ndef conduct_algorithm_heuristic_experiment(\r\n    df: pd.DataFrame,\r\n    algorithm: InformedSearchAlgorithm,\r\n    heuristic: CallableHeuristicClass,\r\n    experiment_folder_path: str,\r\n) -> pd.DataFrame:\r\n    for index, row in tqdm(df.iterrows(), total=len(df), desc=\"Processing rows\"):\r\n        start_board = row[:16].tolist()\r\n        result = play_on_one(start_board, algorithm, heuristic)\r\n\r\n        # Update DataFrame with the obtained results\r\n        df.at[index, \"path_length\"] = result.path_length\r\n        df.at[index, \"time_cp\"] = result.time_cp\r\n        df.at[index, \"space_cp\"] = result.space_cp\r\n        df.at[index, \"time\"] = result.time\r\n\r\n    df.to_csv(\r\n        experiment_folder_path\r\n        + \"algorithm_exp\"\r\n        + \"_\"\r\n        + algorithm.__class__.__name__\r\n        + \"_\"\r\n        + heuristic.__class__.__name__\r\n        + \".csv\"\r\n    )\r\n\r\n    return df\r\n\r\n\r\ndef conduct_algorithm_heuristic_experiment_(\r\n    df: pd.DataFrame,\r\n    algorithm: InformedSearchAlgorithm,\r\n    heuristic: CallableHeuristicClass,\r\n) -> pd.DataFrame:\r\n    for index, row in tqdm(df.iterrows(), total=len(df), desc=\"Processing rows\"):\r\n        start_board = row[:16].tolist()\r\n        result = play_on_one(start_board, algorithm, heuristic)\r\n\r\n        # Update DataFrame with the obtained results\r\n        df.at[index, \"path_length\"] = result.path_length\r\n        df.at[index, \"time_cp\"] = result.time_cp\r\n        df.at[index, \"space_cp\"] = result.space_cp\r\n        df.at[index, \"time\"] = result.time\r\n    return df\r\n\r\n\r\ndef experiment_on_part(experiment_folder_path, part) -> pd.DataFrame:\r\n    result = conduct_algorithm_heuristic_experiment_(part[1], GBFS, manhattan_distance)\r\n    return result\r\n\r\n\r\ndef conduct_algorithm_experiment(\r\n    experiment_data_path: str,\r\n    experiment_folder_path: str,\r\n    n: int = 0,\r\n) -> None:\r\n    if n > 0:\r\n        df = pd.read_csv(experiment_data_path, nrows=n)\r\n    else:\r\n        df = pd.read_csv(experiment_data_path)\r\n\r\n    df = df.sample(frac=1, random_state=42).reset_index(drop=True)\r\n\r\n    # Split the DataFrame into six parts\r\n    df_parts = np.array_split(df, 6)\r\n\r\n    # Create a partial function with experiment_folder_path\r\n    partial_experiment = partial(experiment_on_part, experiment_folder_path)\r\n\r\n    # Create a pool of processes\r\n    with Pool(processes=6) as pool:\r\n        # Run each part concurrently\r\n        results = pool.map(partial_experiment, enumerate(df_parts))\r\n\r\n    merged_df = pd.concat(results, ignore_index=True)\r\n\r\n    merged_df.to_csv(\r\n        experiment_folder_path\r\n        + \"algorithm_exp\"\r\n        + \"_\"\r\n        + \"GBFS\"\r\n        + \"_\"\r\n        + \"manhattan_distance\"\r\n        + \".csv\"\r\n    )\r\n\r\n\r\n# def conduct_algorithm_experiment(\r\n#     experiment_data_path: str,\r\n#     experiment_folder_path: str,\r\n#     n: int = 0,\r\n# ):\r\n#     if n > 0:\r\n#         df = pd.read_csv(experiment_data_path, nrows=n)\r\n#     else:\r\n#         df = pd.read_csv(experiment_data_path)\r\n\r\n#     conduct_algorithm_heuristic_experiment(df, GBFS, ann_distance, experiment_folder_path)\r\n\r\n###\r\n"
			}
		],
		"id": "src/experiments/algorithm_exp.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "experiments"
		}
	},
	{
		"name": "exp_dataset.py",
		"path": "src/experiments/exp_dataset.py",
		"folderPath": "src/experiments",
		"fileContent": "import pandas as pd\r\nimport numpy as np\r\nimport warnings\r\n\r\n\r\ndef make_exp_dataset() -> None:\r\n    warnings.filterwarnings(\"ignore\", category=FutureWarning)\r\n\r\n    df = pd.read_csv(\"data/input/fifteen-puzzle-6M.csv\")\r\n    estimations_df = pd.read_csv(\"data/eda/estimations.csv\")\r\n\r\n    df = df.drop_duplicates().reset_index(drop=True)\r\n\r\n    merged_df = pd.concat([df, estimations_df], axis=1)\r\n    merged_df = merged_df.loc[:, ~merged_df.columns.duplicated()]\r\n\r\n    selected_costs = [10, 20, 30, 40, 50, 60]\r\n    num_residual_values = 6\r\n    num_nearest_rows = 20\r\n\r\n    result_df = pd.DataFrame()\r\n\r\n    for cost in selected_costs:\r\n        print(\"Selecting at\", cost)\r\n        # Filter rows by 'cost' and reset the index to avoid reindexing issues\r\n        cost_filtered = merged_df[merged_df[\"cost\"] == cost].copy()\r\n\r\n        # Calculate range for residuals based on cost\r\n        min_residual = cost * (-0.5)\r\n        max_residual = 0  # As mentioned, maximum residual is likely 0\r\n\r\n        # Create 6 evenly spaced residual values within the range\r\n        residual_values = np.linspace(min_residual, max_residual, num_residual_values)\r\n\r\n        # Get 20 nearest rows for each residual value or nearest values\r\n        for residual in residual_values:\r\n            nearest_rows = cost_filtered.iloc[\r\n                (cost_filtered[\"manhattan_residual\"] - residual)\r\n                .abs()\r\n                .argsort()[:num_nearest_rows]\r\n            ]\r\n            result_df = pd.concat([result_df, nearest_rows])\r\n\r\n    result_df = result_df[\r\n        [\r\n            \"0\",\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n            \"6\",\r\n            \"7\",\r\n            \"8\",\r\n            \"9\",\r\n            \"10\",\r\n            \"11\",\r\n            \"12\",\r\n            \"13\",\r\n            \"14\",\r\n            \"15\",\r\n            \"cost\",\r\n            \"manhattan_residual\",\r\n        ]\r\n    ]\r\n    result_df = result_df.astype(int)\r\n\r\n    result_df.to_csv(\"data/input/experimental_data.csv\", index=False)\r\n",
		"documentation": "# exp_dataset.py\n\nThis is a Python script file named `exp_dataset.py`. The script is used to create an experimental dataset from existing data. It uses the pandas and numpy libraries to manipulate data and the warnings library to handle warnings.\n\n## Description\n\nThe script reads two CSV files, removes duplicates from the first file, and merges it with the second file. It then selects specific rows based on a cost value and calculates a range of residuals for each cost. For each residual value, it selects the 20 nearest rows and appends them to the result DataFrame. The final DataFrame is then saved as a CSV file.\n\n## Usage\n\nTo use this script, simply run it in a Python environment where pandas and numpy are installed. No arguments are required.\n\n## Methods\n\n### make_exp_dataset()\n\nThis is the main function of the script. It does not take any parameters.\n\n#### Description\n\nThe function first suppresses FutureWarning warnings. It then reads two CSV files into pandas DataFrames. The first DataFrame is deduplicated and reset. The two DataFrames are then concatenated along the columns, and any duplicate columns are removed.\n\nThe function then defines a list of selected costs and two variables for the number of residual values and the number of nearest rows. An empty DataFrame is created to store the results.\n\nA loop is then started over the selected costs. For each cost, the function filters the merged DataFrame and calculates a range of residuals. It then creates an array of evenly spaced residual values within the range. For each residual value, it selects the 20 nearest rows and appends them to the result DataFrame.\n\nFinally, the function selects specific columns from the result DataFrame, converts the data to integers, and saves the DataFrame as a CSV file.\n\n#### Parameters\n\nThis function does not take any parameters.\n\n## Technical Concepts\n\nThe script uses the pandas library for data manipulation and the numpy library for numerical operations. It uses the `read_csv`, `drop_duplicates`, `reset_index`, `concat`, `loc`, `abs`, `argsort`, `astype`, and `to_csv` methods from pandas and the `linspace` function from numpy.\n\nThe script also uses list comprehension, for loops, and the `filterwarnings` function from the warnings library. It uses the `copy` method to avoid the SettingWithCopyWarning in pandas.\n\n## File Content\n\nThe file content is a Python script that creates an experimental dataset from existing data. It reads data from two CSV files, manipulates the data, and saves the result as a new CSV file. The script is well-structured and uses several advanced features of the pandas and numpy libraries.",
		"isFolder": false,
		"updated": "2025-03-07T03:36:07.410Z",
		"sidebar_position": 2,
		"sidebar_label": "exp_dataset.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/experiments",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"exp_dataset.py\"\r\nThe file name is: exp_dataset.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport pandas as pd\r\nimport numpy as np\r\nimport warnings\r\n\r\n\r\ndef make_exp_dataset() -> None:\r\n    warnings.filterwarnings(\"ignore\", category=FutureWarning)\r\n\r\n    df = pd.read_csv(\"data/input/fifteen-puzzle-6M.csv\")\r\n    estimations_df = pd.read_csv(\"data/eda/estimations.csv\")\r\n\r\n    df = df.drop_duplicates().reset_index(drop=True)\r\n\r\n    merged_df = pd.concat([df, estimations_df], axis=1)\r\n    merged_df = merged_df.loc[:, ~merged_df.columns.duplicated()]\r\n\r\n    selected_costs = [10, 20, 30, 40, 50, 60]\r\n    num_residual_values = 6\r\n    num_nearest_rows = 20\r\n\r\n    result_df = pd.DataFrame()\r\n\r\n    for cost in selected_costs:\r\n        print(\"Selecting at\", cost)\r\n        # Filter rows by 'cost' and reset the index to avoid reindexing issues\r\n        cost_filtered = merged_df[merged_df[\"cost\"] == cost].copy()\r\n\r\n        # Calculate range for residuals based on cost\r\n        min_residual = cost * (-0.5)\r\n        max_residual = 0  # As mentioned, maximum residual is likely 0\r\n\r\n        # Create 6 evenly spaced residual values within the range\r\n        residual_values = np.linspace(min_residual, max_residual, num_residual_values)\r\n\r\n        # Get 20 nearest rows for each residual value or nearest values\r\n        for residual in residual_values:\r\n            nearest_rows = cost_filtered.iloc[\r\n                (cost_filtered[\"manhattan_residual\"] - residual)\r\n                .abs()\r\n                .argsort()[:num_nearest_rows]\r\n            ]\r\n            result_df = pd.concat([result_df, nearest_rows])\r\n\r\n    result_df = result_df[\r\n        [\r\n            \"0\",\r\n            \"1\",\r\n            \"2\",\r\n            \"3\",\r\n            \"4\",\r\n            \"5\",\r\n            \"6\",\r\n            \"7\",\r\n            \"8\",\r\n            \"9\",\r\n            \"10\",\r\n            \"11\",\r\n            \"12\",\r\n            \"13\",\r\n            \"14\",\r\n            \"15\",\r\n            \"cost\",\r\n            \"manhattan_residual\",\r\n        ]\r\n    ]\r\n    result_df = result_df.astype(int)\r\n\r\n    result_df.to_csv(\"data/input/experimental_data.csv\", index=False)\r\n\r\n###\r\n"
			}
		],
		"id": "src/experiments/exp_dataset.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "experiments"
		}
	},
	{
		"name": "overestimation_exp.py",
		"path": "src/experiments/overestimation_exp.py",
		"folderPath": "src/experiments",
		"fileContent": "import pandas as pd\r\n\r\nfrom ..utils import create_scatterplot_and_save, make_dir\r\nfrom ..ml import get_model, batch_infer\r\n\r\n\r\ndef conduct_overestimation_experiment(\r\n    input_file_path: str, experiment_folder_path: str, n: int = 0\r\n) -> None:\r\n    make_dir(experiment_folder_path)\r\n\r\n    if n > 0:\r\n        df = pd.read_csv(input_file_path, nrows=n)\r\n    else:\r\n        df = pd.read_csv(input_file_path)\r\n\r\n    df = df.drop_duplicates()\r\n\r\n    model = get_model()\r\n\r\n    predicted_costs = batch_infer(df, model)\r\n    df[\"predicted_cost\"] = predicted_costs\r\n\r\n    columns_to_use = [str(i) for i in range(16)]  # Create a list of column names '0' to '15'\r\n    df.drop_duplicates(subset=columns_to_use, inplace=True)\r\n\r\n    len(df)\r\n\r\n    df[\"ann_residual\"] = df[\"predicted_cost\"] - df[\"cost\"]\r\n\r\n    print(\"Creating residual plot for ANN distance\")\r\n    create_scatterplot_and_save(\r\n        df=df,\r\n        x=\"cost\",\r\n        y=\"ann_residual\",\r\n        file_path=experiment_folder_path + \"ann_residual_plot.png\",\r\n    )\r\n\r\n    over_df = df[df[\"ann_residual\"] > 0]\r\n    print(\"Overestimated instance percentage: \", len(over_df) / len(df))\r\n\r\n    df.to_csv(experiment_folder_path + \"experiment1_results.csv\")\r\n",
		"documentation": "# overestimation_exp.py\n\n## Overview\nThis Python script, `overestimation_exp.py`, is designed to conduct an overestimation experiment on a given dataset. The script reads a CSV file, applies a machine learning model to infer predictions, calculates residuals, and creates a scatter plot of the residuals. It also calculates the percentage of overestimated instances and saves the results to a CSV file.\n\n## Usage\nTo use this script, you need to call the `conduct_overestimation_experiment` function with the appropriate parameters. Here is an example:\n\n```python\nfrom overestimation_exp import conduct_overestimation_experiment\n\nconduct_overestimation_experiment('path_to_input_file.csv', 'path_to_experiment_folder', 1000)\n```\n\n## Function: conduct_overestimation_experiment\n\n```python\ndef conduct_overestimation_experiment(\n    input_file_path: str, experiment_folder_path: str, n: int = 0\n) -> None:\n```\n\nThis function conducts the overestimation experiment.\n\n### Parameters\n\n- `input_file_path` (str): The path to the input CSV file.\n- `experiment_folder_path` (str): The path to the folder where the experiment results will be saved.\n- `n` (int, optional): The number of rows to read from the input file. If `n` is greater than 0, the function will read the first `n` rows. If `n` is 0 or not provided, the function will read all rows.\n\n### Description\n\nThe function first creates the experiment folder if it does not exist. Then it reads the input CSV file. If `n` is greater than 0, it reads the first `n` rows; otherwise, it reads all rows. The function then removes duplicate rows.\n\nNext, it applies a machine learning model to the data to infer predictions and adds these predictions to the dataframe as a new column, `predicted_cost`.\n\nThe function then creates a list of column names from '0' to '15' and removes any duplicate rows based on these columns.\n\nThe function calculates the residuals by subtracting the actual cost from the predicted cost and adds these residuals to the dataframe as a new column, `ann_residual`.\n\nThe function then creates a scatter plot of the residuals and saves it to the experiment folder.\n\nFinally, the function calculates the percentage of instances where the predicted cost is greater than the actual cost (overestimation) and prints this percentage. It also saves the dataframe with the predictions and residuals to a CSV file in the experiment folder.\n\n## Dependencies\n\nThis script depends on the following Python libraries:\n\n- pandas\n- ..utils\n- ..ml\n\nThe `..utils` library should contain the `create_scatterplot_and_save` and `make_dir` functions. The `..ml` library should contain the `get_model` and `batch_infer` functions.",
		"isFolder": false,
		"updated": "2025-03-07T03:36:27.315Z",
		"sidebar_position": 3,
		"sidebar_label": "overestimation_exp.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/experiments",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"overestimation_exp.py\"\r\nThe file name is: overestimation_exp.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport pandas as pd\r\n\r\nfrom ..utils import create_scatterplot_and_save, make_dir\r\nfrom ..ml import get_model, batch_infer\r\n\r\n\r\ndef conduct_overestimation_experiment(\r\n    input_file_path: str, experiment_folder_path: str, n: int = 0\r\n) -> None:\r\n    make_dir(experiment_folder_path)\r\n\r\n    if n > 0:\r\n        df = pd.read_csv(input_file_path, nrows=n)\r\n    else:\r\n        df = pd.read_csv(input_file_path)\r\n\r\n    df = df.drop_duplicates()\r\n\r\n    model = get_model()\r\n\r\n    predicted_costs = batch_infer(df, model)\r\n    df[\"predicted_cost\"] = predicted_costs\r\n\r\n    columns_to_use = [str(i) for i in range(16)]  # Create a list of column names '0' to '15'\r\n    df.drop_duplicates(subset=columns_to_use, inplace=True)\r\n\r\n    len(df)\r\n\r\n    df[\"ann_residual\"] = df[\"predicted_cost\"] - df[\"cost\"]\r\n\r\n    print(\"Creating residual plot for ANN distance\")\r\n    create_scatterplot_and_save(\r\n        df=df,\r\n        x=\"cost\",\r\n        y=\"ann_residual\",\r\n        file_path=experiment_folder_path + \"ann_residual_plot.png\",\r\n    )\r\n\r\n    over_df = df[df[\"ann_residual\"] > 0]\r\n    print(\"Overestimated instance percentage: \", len(over_df) / len(df))\r\n\r\n    df.to_csv(experiment_folder_path + \"experiment1_results.csv\")\r\n\r\n###\r\n"
			}
		],
		"id": "src/experiments/overestimation_exp.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "experiments"
		}
	},
	{
		"name": "__init__.py",
		"path": "src/ml/__init__.py",
		"folderPath": "src/ml",
		"fileContent": "from .modelling import train\r\nfrom .inferring import infer, batch_infer, get_model\r\n",
		"documentation": "# __init__.py\n\n## Overview\nThe `__init__.py` file is a special file in Python that allows a directory to become a Python package, meaning it can be imported just like a module. This file can be left empty or can execute initialization code for the package or set the `__all__` variable.\n\nIn this specific `__init__.py` file, we are importing several functions from two different modules, `modelling` and `inferring`. This allows the functions to be directly accessible when the package is imported.\n\n## Code Description\n\n### Import Statements\n```python\nfrom .modelling import train\nfrom .inferring import infer, batch_infer, get_model\n```\nThese lines are importing the `train` function from the `modelling` module, and the `infer`, `batch_infer`, and `get_model` functions from the `inferring` module.\n\n## Functions\n\n### train\nThis function is imported from the `modelling` module. It is used to train a model. The specific parameters and usage of this function would be detailed in the `modelling` module documentation.\n\n### infer\nThis function is imported from the `inferring` module. It is used to make inferences or predictions using a trained model. The specific parameters and usage of this function would be detailed in the `inferring` module documentation.\n\n### batch_infer\nThis function is also imported from the `inferring` module. It is used to make inferences or predictions on a batch of data using a trained model. The specific parameters and usage of this function would be detailed in the `inferring` module documentation.\n\n### get_model\nThis function is imported from the `inferring` module. It is used to retrieve a trained model. The specific parameters and usage of this function would be detailed in the `inferring` module documentation.\n\n## Conclusion\nThis `__init__.py` file is used to import several functions from the `modelling` and `inferring` modules, making them directly accessible when the package is imported. For more detailed information on the usage and parameters of these functions, refer to the documentation for the respective modules.",
		"isFolder": false,
		"updated": "2025-03-07T03:36:42.639Z",
		"sidebar_position": 0,
		"sidebar_label": "__init__.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/ml",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"__init__.py\"\r\nThe file name is: __init__.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nfrom .modelling import train\r\nfrom .inferring import infer, batch_infer, get_model\r\n\r\n###\r\n"
			}
		],
		"id": "src/ml/__init__.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "ml"
		}
	},
	{
		"name": "inferring.py",
		"path": "src/ml/inferring.py",
		"folderPath": "src/ml",
		"fileContent": "import torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\n\r\nimport numpy as np\r\n\r\nfrom tqdm import tqdm\r\n\r\n\r\nclass PuzzleHeuristicModel(nn.Module):\r\n    def __init__(self, input_size, hidden_sizes) -> None:\r\n        super(PuzzleHeuristicModel, self).__init__()\r\n        all_sizes = [input_size] + hidden_sizes + [1]\r\n        self.hidden_layers = nn.ModuleList(\r\n            [nn.Linear(all_sizes[i], all_sizes[i + 1]) for i in range(len(all_sizes) - 1)]\r\n        )\r\n\r\n    def forward(self, x):\r\n        for layer in self.hidden_layers[:-1]:\r\n            x = F.relu(layer(x))\r\n        x = self.hidden_layers[-1](x)\r\n        return x\r\n\r\n\r\ndef get_model(model_path: str = \"data/models/puzzle_model.pth\") -> nn.Module:\r\n    input_size = 256\r\n    hidden_sizes = [1024, 1024, 512, 128, 64]\r\n    model = PuzzleHeuristicModel(input_size, hidden_sizes)\r\n\r\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\r\n\r\n    checkpoint = torch.load(model_path, map_location=torch.device(\"cpu\"))\r\n\r\n    if \"module.\" in list(checkpoint.keys())[0]:\r\n        new_state_dict = {}\r\n        for key, value in checkpoint.items():\r\n            new_key = key.replace(\"module.\", \"\")\r\n            new_state_dict[new_key] = value\r\n        checkpoint = new_state_dict\r\n\r\n    model.load_state_dict(checkpoint)\r\n    model.eval()\r\n\r\n    if torch.cuda.device_count() > 1:\r\n        print(\"Using\", torch.cuda.device_count(), \"GPUs!\")\r\n        model = torch.nn.DataParallel(model)\r\n\r\n    return model.to(device)\r\n\r\n\r\ndef infer(input_data: list[int], model: PuzzleHeuristicModel) -> int:\r\n    input_data = torch.tensor(\r\n        np.eye(16)[np.array(input_data).astype(np.int64)].ravel(), dtype=torch.float32\r\n    ).unsqueeze(\r\n        0\r\n    )  # Convert input list to tensor\r\n\r\n    with torch.no_grad():\r\n        output = model(input_data)\r\n        predicted_value = output.item()\r\n\r\n    return int(round(predicted_value))\r\n\r\n\r\ndef batch_infer(dataframe, model, batch_size=64) -> list[int]:\r\n    input_data = torch.tensor(\r\n        np.eye(16)[dataframe.iloc[:, :16].values.astype(np.int64)].reshape(-1, 16, 256),\r\n        dtype=torch.float32,\r\n    )  # Prepare input data as a tensor\r\n\r\n    predicted_values = []\r\n\r\n    with torch.no_grad(), tqdm(total=len(input_data)) as pbar:\r\n        for batch in range(0, len(input_data), batch_size):  # assuming batch_size is defined\r\n            batch_input = input_data[batch : batch + batch_size]  # noqa\r\n            output = model(batch_input)\r\n            predicted_values.extend(output.squeeze().tolist())\r\n            pbar.update(len(batch_input))\r\n\r\n    predicted_values = [int(round(item)) for sublist in predicted_values for item in sublist]\r\n    return predicted_values\r\n",
		"documentation": "# inferring.py\n\nThis is a Python script that uses PyTorch to define and use a neural network model for solving puzzles. The script contains a class definition for the model, as well as functions for loading the model, making single inferences, and making batch inferences.\n\n## PuzzleHeuristicModel Class\n\nThis class defines a neural network model for solving puzzles. It inherits from the `nn.Module` class in PyTorch.\n\n### `__init__(self, input_size, hidden_sizes) -> None`\n\nThis is the constructor method for the `PuzzleHeuristicModel` class. It takes two parameters:\n\n- `input_size`: An integer that specifies the size of the input layer of the neural network.\n- `hidden_sizes`: A list of integers that specifies the sizes of the hidden layers of the neural network.\n\nThe method initializes the hidden layers of the neural network using the `nn.Linear` class from PyTorch.\n\n### `forward(self, x)`\n\nThis method defines the forward pass of the neural network. It takes one parameter:\n\n- `x`: A tensor that represents the input to the neural network.\n\nThe method applies the ReLU activation function to the outputs of all hidden layers except the last one, and returns the output of the last hidden layer.\n\n## Functions\n\n### `get_model(model_path: str = \"data/models/puzzle_model.pth\") -> nn.Module`\n\nThis function loads a pre-trained `PuzzleHeuristicModel` from a file. It takes one optional parameter:\n\n- `model_path`: A string that specifies the path to the file that contains the pre-trained model. The default value is `\"data/models/puzzle_model.pth\"`.\n\nThe function returns the loaded model.\n\n### `infer(input_data: list[int], model: PuzzleHeuristicModel) -> int`\n\nThis function makes a single inference using a `PuzzleHeuristicModel`. It takes two parameters:\n\n- `input_data`: A list of integers that represents the input to the model.\n- `model`: A `PuzzleHeuristicModel` that will make the inference.\n\nThe function returns the predicted value as an integer.\n\n### `batch_infer(dataframe, model, batch_size=64) -> list[int]`\n\nThis function makes batch inferences using a `PuzzleHeuristicModel`. It takes three parameters:\n\n- `dataframe`: A pandas DataFrame that contains the input data. Each row of the DataFrame represents one input.\n- `model`: A `PuzzleHeuristicModel` that will make the inferences.\n- `batch_size`: An optional integer that specifies the size of the batches. The default value is `64`.\n\nThe function returns a list of predicted values. Each value corresponds to one row of the input DataFrame.",
		"isFolder": false,
		"updated": "2025-03-07T03:37:00.070Z",
		"sidebar_position": 1,
		"sidebar_label": "inferring.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/ml",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"inferring.py\"\r\nThe file name is: inferring.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\n\r\nimport numpy as np\r\n\r\nfrom tqdm import tqdm\r\n\r\n\r\nclass PuzzleHeuristicModel(nn.Module):\r\n    def __init__(self, input_size, hidden_sizes) -> None:\r\n        super(PuzzleHeuristicModel, self).__init__()\r\n        all_sizes = [input_size] + hidden_sizes + [1]\r\n        self.hidden_layers = nn.ModuleList(\r\n            [nn.Linear(all_sizes[i], all_sizes[i + 1]) for i in range(len(all_sizes) - 1)]\r\n        )\r\n\r\n    def forward(self, x):\r\n        for layer in self.hidden_layers[:-1]:\r\n            x = F.relu(layer(x))\r\n        x = self.hidden_layers[-1](x)\r\n        return x\r\n\r\n\r\ndef get_model(model_path: str = \"data/models/puzzle_model.pth\") -> nn.Module:\r\n    input_size = 256\r\n    hidden_sizes = [1024, 1024, 512, 128, 64]\r\n    model = PuzzleHeuristicModel(input_size, hidden_sizes)\r\n\r\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\r\n\r\n    checkpoint = torch.load(model_path, map_location=torch.device(\"cpu\"))\r\n\r\n    if \"module.\" in list(checkpoint.keys())[0]:\r\n        new_state_dict = {}\r\n        for key, value in checkpoint.items():\r\n            new_key = key.replace(\"module.\", \"\")\r\n            new_state_dict[new_key] = value\r\n        checkpoint = new_state_dict\r\n\r\n    model.load_state_dict(checkpoint)\r\n    model.eval()\r\n\r\n    if torch.cuda.device_count() > 1:\r\n        print(\"Using\", torch.cuda.device_count(), \"GPUs!\")\r\n        model = torch.nn.DataParallel(model)\r\n\r\n    return model.to(device)\r\n\r\n\r\ndef infer(input_data: list[int], model: PuzzleHeuristicModel) -> int:\r\n    input_data = torch.tensor(\r\n        np.eye(16)[np.array(input_data).astype(np.int64)].ravel(), dtype=torch.float32\r\n    ).unsqueeze(\r\n        0\r\n    )  # Convert input list to tensor\r\n\r\n    with torch.no_grad():\r\n        output = model(input_data)\r\n        predicted_value = output.item()\r\n\r\n    return int(round(predicted_value))\r\n\r\n\r\ndef batch_infer(dataframe, model, batch_size=64) -> list[int]:\r\n    input_data = torch.tensor(\r\n        np.eye(16)[dataframe.iloc[:, :16].values.astype(np.int64)].reshape(-1, 16, 256),\r\n        dtype=torch.float32,\r\n    )  # Prepare input data as a tensor\r\n\r\n    predicted_values = []\r\n\r\n    with torch.no_grad(), tqdm(total=len(input_data)) as pbar:\r\n        for batch in range(0, len(input_data), batch_size):  # assuming batch_size is defined\r\n            batch_input = input_data[batch : batch + batch_size]  # noqa\r\n            output = model(batch_input)\r\n            predicted_values.extend(output.squeeze().tolist())\r\n            pbar.update(len(batch_input))\r\n\r\n    predicted_values = [int(round(item)) for sublist in predicted_values for item in sublist]\r\n    return predicted_values\r\n\r\n###\r\n"
			}
		],
		"id": "src/ml/inferring.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "ml"
		}
	},
	{
		"name": "modelling.py",
		"path": "src/ml/modelling.py",
		"folderPath": "src/ml",
		"fileContent": "import torch\r\nimport torch.nn as nn\r\nimport torch.optim as optim\r\nfrom torch.utils.data import DataLoader, Dataset\r\nfrom torch import Tensor\r\n\r\nimport pandas as pd\r\nfrom sklearn.model_selection import train_test_split\r\nimport torch.nn.functional as F\r\nimport numpy as np\r\n\r\nimport os\r\nimport logging\r\nfrom tqdm import tqdm\r\n\r\nfrom ..utils import make_dir\r\n\r\n\r\nclass PuzzleDataset(Dataset):\r\n    def __init__(self, data) -> None:\r\n        self.data = data\r\n\r\n    def __len__(self) -> int:\r\n        return len(self.data)\r\n\r\n    def __getitem__(self, idx) -> tuple[Tensor, Tensor]:\r\n        state = torch.tensor(self.data.iloc[idx, :-1].values, dtype=torch.float32)\r\n        state_one_hot = torch.tensor(\r\n            np.eye(16)[state.to(torch.int64)].ravel(), dtype=torch.float32\r\n        )\r\n        cost = torch.tensor(self.data.iloc[idx, -1], dtype=torch.float32)\r\n        return state_one_hot, cost\r\n\r\n\r\nclass PuzzleHeuristicModel(nn.Module):\r\n    def __init__(self, input_size, hidden_sizes) -> None:\r\n        super(PuzzleHeuristicModel, self).__init__()\r\n        all_sizes = [input_size] + hidden_sizes + [1]\r\n        self.hidden_layers = nn.ModuleList(\r\n            [nn.Linear(all_sizes[i], all_sizes[i + 1]) for i in range(len(all_sizes) - 1)]\r\n        )\r\n\r\n    def forward(self, x: Tensor) -> Tensor:\r\n        for layer in self.hidden_layers[:-1]:\r\n            x = F.relu(layer(x))\r\n        x = self.hidden_layers[-1](x)\r\n        return x\r\n\r\n\r\ndef train(\r\n    input_file_path: str, save_model_dir: str, run_name: str, n: int, should_stratify: bool\r\n) -> None:\r\n    working_dir = save_model_dir + run_name\r\n    make_dir(working_dir)\r\n\r\n    print(\"Starting training...\")\r\n\r\n    log_file = f\"{working_dir}/logs.txt\"\r\n    if os.path.exists(log_file):\r\n        os.remove(log_file)\r\n    logging.basicConfig(\r\n        handlers=[\r\n            logging.FileHandler(log_file),  # Output to file\r\n            logging.StreamHandler(),  # Output to console\r\n        ],\r\n        level=logging.INFO,\r\n        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n    )\r\n\r\n    logging.info(f\"Logs and weights will be found in {working_dir}.\")\r\n\r\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\r\n\r\n    logging.info(\"Loading dataset...\")\r\n    # Load the data\r\n    file_path = input_file_path\r\n\r\n    if n > 0:\r\n        data = pd.read_csv(file_path, nrows=n)\r\n    else:\r\n        data = pd.read_csv(file_path)\r\n\r\n    data = data[data[\"cost\"] < 70]\r\n    logging.info(\"Done.\")\r\n\r\n    logging.info(\"Splitting the data into train, set, val sets...\")\r\n\r\n    if should_stratify:  # assuming 'should_stratify' is a boolean variable\r\n        train_data, remaining_data = train_test_split(\r\n            data, test_size=0.3, stratify=data[\"cost\"], random_state=42\r\n        )\r\n        test_data, val_data = train_test_split(\r\n            remaining_data, test_size=0.5, stratify=remaining_data[\"cost\"], random_state=42\r\n        )\r\n    else:\r\n        train_data, remaining_data = train_test_split(data, test_size=0.3, random_state=42)\r\n        test_data, val_data = train_test_split(remaining_data, test_size=0.5, random_state=42)\r\n\r\n    logging.info(\"Done.\")\r\n\r\n    # Display the sizes of each split\r\n    logging.info(f\"Train data size: {len(train_data)}\")\r\n    logging.info(f\"Test data size: {len(test_data)}\")\r\n    logging.info(f\"Validation data size: {len(val_data)}\")\r\n\r\n    batch_size = 64\r\n    train_dataset = PuzzleDataset(train_data)\r\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\r\n\r\n    test_dataset = PuzzleDataset(test_data)\r\n    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\r\n\r\n    val_dataset = PuzzleDataset(val_data)\r\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\r\n\r\n    input_size = 256\r\n    hidden_sizes = [1024, 1024, 512, 128, 64]\r\n    model = PuzzleHeuristicModel(input_size, hidden_sizes)\r\n\r\n    logging.info(f\"Hidden sizes: {hidden_sizes}\")\r\n\r\n    if torch.cuda.device_count() > 1:\r\n        model = nn.DataParallel(model)\r\n    model.to(device)\r\n    optimizer = optim.Adam(model.parameters(), lr=0.001)\r\n    criterion = nn.MSELoss()\r\n\r\n    num_epochs = 10\r\n    best_loss = float(\"inf\")\r\n\r\n    best_model_folder = working_dir + \"/immediate/\"\r\n    if not os.path.exists(best_model_folder):\r\n        os.makedirs(best_model_folder)\r\n\r\n    best_model_path = best_model_folder + \"best_puzzle_model.pth\"\r\n\r\n    logging.info(\"Training...\")\r\n    LOG_INTERVAL = 10\r\n\r\n    for epoch in range(num_epochs):\r\n        model.train()\r\n        progress_bar = tqdm(\r\n            train_loader, desc=f\"Epoch {epoch + 1}/{num_epochs}\", file=open(os.devnull, \"w\")\r\n        )\r\n        for inputs, targets in progress_bar:\r\n            inputs, targets = inputs.to(device), targets.to(device)\r\n            optimizer.zero_grad()\r\n            outputs = model(inputs)\r\n            loss = criterion(outputs, targets.view(-1, 1))\r\n            loss.backward()\r\n            optimizer.step()\r\n            if progress_bar.n % LOG_INTERVAL == 0:\r\n                logging.info(str(progress_bar))\r\n\r\n        # Validation\r\n        model.eval()\r\n        with torch.no_grad():\r\n            val_loss = 0.0\r\n            progress_bar = tqdm(val_loader, desc=\"Validation\")\r\n            for inputs, targets in progress_bar:\r\n                inputs, targets = inputs.to(device), targets.to(device)\r\n                outputs = model(inputs)\r\n                val_loss += criterion(outputs, targets.view(-1, 1)).item()\r\n                if progress_bar.n % LOG_INTERVAL == 0:\r\n                    logging.info(str(progress_bar))\r\n            val_loss /= len(val_loader)  # Average validation loss\r\n\r\n        logging.info(f\"Epoch {epoch + 1}/{num_epochs}, Validation Loss: {val_loss}\")\r\n\r\n        # Save the best model based on validation loss\r\n        if val_loss < best_loss:\r\n            best_loss = val_loss\r\n            torch.save(model.state_dict(), best_model_path)\r\n\r\n    logging.info(\"Done.\")\r\n    logging.info(\"Testing...\")\r\n\r\n    if torch.cuda.device_count() > 1:\r\n        best_model = nn.DataParallel(model)\r\n    else:\r\n        best_model = model\r\n    best_model.to(device)\r\n    best_model.load_state_dict(torch.load(best_model_path))\r\n\r\n    # Testing\r\n    test_loss = 0.0\r\n    best_model.eval()\r\n    with torch.no_grad():\r\n        for inputs, targets in test_loader:\r\n            inputs, targets = inputs.to(device), targets.to(device)\r\n            outputs = best_model(inputs)\r\n            test_loss += criterion(outputs, targets.view(-1, 1)).item()\r\n    test_loss /= len(test_loader)  # Average test loss\r\n\r\n    logging.info(f\"Final Test Loss: {test_loss}\")\r\n    logging.info(\"Done.\")\r\n",
		"documentation": "# modelling.py\n\nThis Python file contains the implementation of a machine learning model for solving puzzles. The file includes the definition of a custom PyTorch Dataset class, a PyTorch Model class, and a training function. The code uses PyTorch for model definition, training, and inference, and pandas for data manipulation.\n\n## PuzzleDataset Class\n\nThis class is a custom implementation of the PyTorch Dataset class. It is used to load the puzzle data and make it available to the PyTorch DataLoader.\n\n### Methods\n\n- `__init__(self, data) -> None`: This method initializes the PuzzleDataset object. It takes a pandas DataFrame `data` as input, which should contain the puzzle data.\n\n- `__len__(self) -> int`: This method returns the number of samples in the dataset.\n\n- `__getitem__(self, idx) -> tuple[Tensor, Tensor]`: This method returns the `idx`-th sample from the dataset. The sample is returned as a tuple of two PyTorch tensors: the state of the puzzle and the cost of the puzzle.\n\n## PuzzleHeuristicModel Class\n\nThis class is a custom implementation of the PyTorch Module class. It defines a neural network model for predicting the cost of a puzzle given its state.\n\n### Methods\n\n- `__init__(self, input_size, hidden_sizes) -> None`: This method initializes the PuzzleHeuristicModel object. It takes two arguments: `input_size`, which is the size of the input tensor, and `hidden_sizes`, which is a list of integers representing the sizes of the hidden layers in the network.\n\n- `forward(self, x: Tensor) -> Tensor`: This method defines the forward pass of the network. It takes a PyTorch tensor `x` as input and returns a PyTorch tensor as output.\n\n## train Function\n\nThis function trains the PuzzleHeuristicModel on the puzzle data. It takes five arguments: `input_file_path`, `save_model_dir`, `run_name`, `n`, and `should_stratify`.\n\n### Parameters\n\n- `input_file_path: str`: The path to the CSV file containing the puzzle data.\n- `save_model_dir: str`: The directory where the trained model should be saved.\n- `run_name: str`: The name of the training run. This is used to create a subdirectory in `save_model_dir` where the logs and model weights for this run will be saved.\n- `n: int`: The number of rows to read from the CSV file. If `n` is less than or equal to 0, all rows are read.\n- `should_stratify: bool`: Whether to stratify the train-test split. If `True`, the split is stratified based on the 'cost' column of the data.\n\n### Return\n\n- `None`\n\n## Technical Concepts\n\n- PyTorch: PyTorch is an open-source machine learning library based on the Torch library. It is used for applications such as computer vision and",
		"isFolder": false,
		"updated": "2025-03-07T03:37:27.833Z",
		"sidebar_position": 2,
		"sidebar_label": "modelling.py",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src/ml",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"modelling.py\"\r\nThe file name is: modelling.py\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.optim as optim\r\nfrom torch.utils.data import DataLoader, Dataset\r\nfrom torch import Tensor\r\n\r\nimport pandas as pd\r\nfrom sklearn.model_selection import train_test_split\r\nimport torch.nn.functional as F\r\nimport numpy as np\r\n\r\nimport os\r\nimport logging\r\nfrom tqdm import tqdm\r\n\r\nfrom ..utils import make_dir\r\n\r\n\r\nclass PuzzleDataset(Dataset):\r\n    def __init__(self, data) -> None:\r\n        self.data = data\r\n\r\n    def __len__(self) -> int:\r\n        return len(self.data)\r\n\r\n    def __getitem__(self, idx) -> tuple[Tensor, Tensor]:\r\n        state = torch.tensor(self.data.iloc[idx, :-1].values, dtype=torch.float32)\r\n        state_one_hot = torch.tensor(\r\n            np.eye(16)[state.to(torch.int64)].ravel(), dtype=torch.float32\r\n        )\r\n        cost = torch.tensor(self.data.iloc[idx, -1], dtype=torch.float32)\r\n        return state_one_hot, cost\r\n\r\n\r\nclass PuzzleHeuristicModel(nn.Module):\r\n    def __init__(self, input_size, hidden_sizes) -> None:\r\n        super(PuzzleHeuristicModel, self).__init__()\r\n        all_sizes = [input_size] + hidden_sizes + [1]\r\n        self.hidden_layers = nn.ModuleList(\r\n            [nn.Linear(all_sizes[i], all_sizes[i + 1]) for i in range(len(all_sizes) - 1)]\r\n        )\r\n\r\n    def forward(self, x: Tensor) -> Tensor:\r\n        for layer in self.hidden_layers[:-1]:\r\n            x = F.relu(layer(x))\r\n        x = self.hidden_layers[-1](x)\r\n        return x\r\n\r\n\r\ndef train(\r\n    input_file_path: str, save_model_dir: str, run_name: str, n: int, should_stratify: bool\r\n) -> None:\r\n    working_dir = save_model_dir + run_name\r\n    make_dir(working_dir)\r\n\r\n    print(\"Starting training...\")\r\n\r\n    log_file = f\"{working_dir}/logs.txt\"\r\n    if os.path.exists(log_file):\r\n        os.remove(log_file)\r\n    logging.basicConfig(\r\n        handlers=[\r\n            logging.FileHandler(log_file),  # Output to file\r\n            logging.StreamHandler(),  # Output to console\r\n        ],\r\n        level=logging.INFO,\r\n        format=\"%(asctime)s - %(levelname)s - %(message)s\",\r\n    )\r\n\r\n    logging.info(f\"Logs and weights will be found in {working_dir}.\")\r\n\r\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\r\n\r\n    logging.info(\"Loading dataset...\")\r\n    # Load the data\r\n    file_path = input_file_path\r\n\r\n    if n > 0:\r\n        data = pd.read_csv(file_path, nrows=n)\r\n    else:\r\n        data = pd.read_csv(file_path)\r\n\r\n    data = data[data[\"cost\"] < 70]\r\n    logging.info(\"Done.\")\r\n\r\n    logging.info(\"Splitting the data into train, set, val sets...\")\r\n\r\n    if should_stratify:  # assuming 'should_stratify' is a boolean variable\r\n        train_data, remaining_data = train_test_split(\r\n            data, test_size=0.3, stratify=data[\"cost\"], random_state=42\r\n        )\r\n        test_data, val_data = train_test_split(\r\n            remaining_data, test_size=0.5, stratify=remaining_data[\"cost\"], random_state=42\r\n        )\r\n    else:\r\n        train_data, remaining_data = train_test_split(data, test_size=0.3, random_state=42)\r\n        test_data, val_data = train_test_split(remaining_data, test_size=0.5, random_state=42)\r\n\r\n    logging.info(\"Done.\")\r\n\r\n    # Display the sizes of each split\r\n    logging.info(f\"Train data size: {len(train_data)}\")\r\n    logging.info(f\"Test data size: {len(test_data)}\")\r\n    logging.info(f\"Validation data size: {len(val_data)}\")\r\n\r\n    batch_size = 64\r\n    train_dataset = PuzzleDataset(train_data)\r\n    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\r\n\r\n    test_dataset = PuzzleDataset(test_data)\r\n    test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\r\n\r\n    val_dataset = PuzzleDataset(val_data)\r\n    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\r\n\r\n    input_size = 256\r\n    hidden_sizes = [1024, 1024, 512, 128, 64]\r\n    model = PuzzleHeuristicModel(input_size, hidden_sizes)\r\n\r\n    logging.info(f\"Hidden sizes: {hidden_sizes}\")\r\n\r\n    if torch.cuda.device_count() > 1:\r\n        model = nn.DataParallel(model)\r\n    model.to(device)\r\n    optimizer = optim.Adam(model.parameters(), lr=0.001)\r\n    criterion = nn.MSELoss()\r\n\r\n    num_epochs = 10\r\n    best_loss = float(\"inf\")\r\n\r\n    best_model_folder = working_dir + \"/immediate/\"\r\n    if not os.path.exists(best_model_folder):\r\n        os.makedirs(best_model_folder)\r\n\r\n    best_model_path = best_model_folder + \"best_puzzle_model.pth\"\r\n\r\n    logging.info(\"Training...\")\r\n    LOG_INTERVAL = 10\r\n\r\n    for epoch in range(num_epochs):\r\n        model.train()\r\n        progress_bar = tqdm(\r\n            train_loader, desc=f\"Epoch {epoch + 1}/{num_epochs}\", file=open(os.devnull, \"w\")\r\n        )\r\n        for inputs, targets in progress_bar:\r\n            inputs, targets = inputs.to(device), targets.to(device)\r\n            optimizer.zero_grad()\r\n            outputs = model(inputs)\r\n            loss = criterion(outputs, targets.view(-1, 1))\r\n            loss.backward()\r\n            optimizer.step()\r\n            if progress_bar.n % LOG_INTERVAL == 0:\r\n                logging.info(str(progress_bar))\r\n\r\n        # Validation\r\n        model.eval()\r\n        with torch.no_grad():\r\n            val_loss = 0.0\r\n            progress_bar = tqdm(val_loader, desc=\"Validation\")\r\n            for inputs, targets in progress_bar:\r\n                inputs, targets = inputs.to(device), targets.to(device)\r\n                outputs = model(inputs)\r\n                val_loss += criterion(outputs, targets.view(-1, 1)).item()\r\n                if progress_bar.n % LOG_INTERVAL == 0:\r\n                    logging.info(str(progress_bar))\r\n            val_loss /= len(val_loader)  # Average validation loss\r\n\r\n        logging.info(f\"Epoch {epoch + 1}/{num_epochs}, Validation Loss: {val_loss}\")\r\n\r\n        # Save the best model based on validation loss\r\n        if val_loss < best_loss:\r\n            best_loss = val_loss\r\n            torch.save(model.state_dict(), best_model_path)\r\n\r\n    logging.info(\"Done.\")\r\n    logging.info(\"Testing...\")\r\n\r\n    if torch.cuda.device_count() > 1:\r\n        best_model = nn.DataParallel(model)\r\n    else:\r\n        best_model = model\r\n    best_model.to(device)\r\n    best_model.load_state_dict(torch.load(best_model_path))\r\n\r\n    # Testing\r\n    test_loss = 0.0\r\n    best_model.eval()\r\n    with torch.no_grad():\r\n        for inputs, targets in test_loader:\r\n            inputs, targets = inputs.to(device), targets.to(device)\r\n            outputs = best_model(inputs)\r\n            test_loss += criterion(outputs, targets.view(-1, 1)).item()\r\n    test_loss /= len(test_loader)  # Average test loss\r\n\r\n    logging.info(f\"Final Test Loss: {test_loss}\")\r\n    logging.info(\"Done.\")\r\n\r\n###\r\n"
			}
		],
		"id": "src/ml/modelling.py",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"parent": "ml"
		}
	},
	{
		"name": "README",
		"path": "src/algorithms",
		"folderPath": "src/algorithms",
		"fileContent": "",
		"documentation": "# Documentation for src/algorithms Folder\n\nThis folder is responsible for the implementation of various search algorithms. Each file in this folder represents a different search algorithm or a related functionality. \n\n## Table of Contents\n\n1. [__init__.py](#__init__.py)\n2. [abstract_search.py](#abstract_search.py)\n3. [astar.py](#astar.py)\n4. [gbfs.py](#gbfs.py)\n5. [rbfs.py](#rbfs.py)\n\n## __init__.py\n\nThe `__init__.py` file is a special Python file that allows a directory to become a Python package which can be imported as a module. In the context of this folder, it might be used to initialize certain variables, functions or classes when the package is imported.\n\n[Link to __init__.py documentation](#__init__.py)\n\n## abstract_search.py\n\nThe `abstract_search.py` file contains classes and methods that define the structure and functionality of search algorithms. It includes both uninformed and informed search algorithms, as well as a class to represent the result of a search algorithm. The file uses Python's built-in `enum`, `dataclasses`, and `abc` modules, as well as custom modules `heuristics`, `node`, and `state`.\n\n[Link to abstract_search.py documentation](#abstract_search.py)\n\n## astar.py\n\nThe `astar.py` file implements the A* search algorithm. The A* algorithm is a popular choice in pathfinding and graph traversal, which is the process of finding a path between multiple points, called \"nodes\". It's widely used in applications such as maps, robotics, and AI.\n\n[Link to astar.py documentation](#astar.py)\n\n## gbfs.py\n\nThe `gbfs.py` file contains the implementation of the Greedy Best-First Search (GBFS) algorithm. GBFS is an informed search algorithm that uses a heuristic function to estimate the cost of reaching the goal from a given state.\n\n[Link to gbfs.py documentation](#gbfs.py)\n\n## rbfs.py\n\nThe `rbfs.py` file implements the Recursive Best First Search (RBFS) algorithm. The RBFS algorithm is a type of informed search algorithm that uses a heuristic function to guide its search. This implementation of the RBFS algorithm is designed to be used with a callable heuristic class and allows for a limit to be set on the f_cost of nodes.\n\n[Link to rbfs.py documentation](#rbfs.py)\n\n[Link to repository](/src/algorithms)",
		"isFolder": true,
		"updated": "2025-03-07T03:37:52.487Z",
		"sidebar_position": 30,
		"sidebar_label": "algorithms",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src/algorithms",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is /src/algorithms\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"__init__.py\",\"path\":\"src/algorithms/__init__.py\",\"fileOrFolder\":\"file\",\"summary\":\"# __init__.py\\n\\n## Overview\"},{\"name\":\"abstract_search.py\",\"path\":\"src/algorithms/abstract_search.py\",\"fileOrFolder\":\"file\",\"summary\":\"# abstract_search.py\\n\\nThis Python file, `abstract_search.py`, contains classes and methods that define the structure and functionality of search algorithms. It includes both uninformed and informed search algorithms, as well as a class to represent the result of a search algorithm. The file uses Python's built-in `enum`, `dataclasses`, and `abc` modules, as well as custom modules `heuristics`, `node`, and `state`.\\n\\n## SearchResult Class\"},{\"name\":\"astar.py\",\"path\":\"src/algorithms/astar.py\",\"fileOrFolder\":\"file\",\"summary\":\"# astar.py\\n\\nThis is a Python code file that implements the A* search algorithm. The A* algorithm is a popular choice in pathfinding and graph traversal, which is the process of finding a path between multiple points, called \\\"nodes\\\". It's widely used in applications such as maps, robotics, and AI.\\n\\n## Class: AStar\"},{\"name\":\"gbfs.py\",\"path\":\"src/algorithms/gbfs.py\",\"fileOrFolder\":\"file\",\"summary\":\"# gbfs.py\\n\\nThis is a Python code file named `gbfs.py` which contains the implementation of the Greedy Best-First Search (GBFS) algorithm. GBFS is an informed search algorithm that uses a heuristic function to estimate the cost of reaching the goal from a given state.\\n\\n## Class: GBFS\"},{\"name\":\"rbfs.py\",\"path\":\"src/algorithms/rbfs.py\",\"fileOrFolder\":\"file\",\"summary\":\"# rbfs.py\\n\\nThis is a Python code file that implements the Recursive Best First Search (RBFS) algorithm. The RBFS algorithm is a type of informed search algorithm that uses a heuristic function to guide its search. This implementation of the RBFS algorithm is designed to be used with a callable heuristic class and allows for a limit to be set on the f_cost of nodes.\\n\\n## Class: RBFS\"}]\r\n###"
			}
		],
		"id": "src/algorithms",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src/eda",
		"folderPath": "src/eda",
		"fileContent": "",
		"documentation": "# Exploratory Data Analysis (EDA) Folder Documentation\n\nThis documentation provides an overview of the content and functionality of the Exploratory Data Analysis (EDA) folder in the system. The EDA folder is responsible for data analysis and visualization, and it contains several Python scripts and Jupyter notebook files that perform various tasks related to this.\n\n## Table of Contents\n\n1. [__init__.py](#__init__.py)\n2. [data_analysis.ipynb](#data_analysis.ipynb)\n3. [heuristics_cost.py](#heuristics_cost.py)\n4. [viewer.ipynb](#viewer.ipynb)\n5. [Repository Link](#Repository-Link)\n\n## __init__.py\n\n[__init__.py](src/eda/__init__.py) is a special Python file that is executed when the module is imported. It can be used to initialize the module and import necessary dependencies.\n\n## data_analysis.ipynb\n\n[data_analysis.ipynb](src/eda/data_analysis.ipynb) is a Jupyter notebook file that contains Python code for data analysis. It provides a convenient interface for interactive data exploration and visualization.\n\n## heuristics_cost.py\n\n[heuristics_cost.py](src/eda/heuristics_cost.py) is a Python script that calculates the heuristic cost for the data analysis. It is an important part of the data analysis process, as it helps to guide the search for optimal solutions.\n\n## viewer.ipynb\n\n[viewer.ipynb](src/eda/viewer.ipynb) is a Jupyter notebook file that provides a graphical interface for viewing the data. It imports necessary libraries and reads a CSV file into a pandas DataFrame. It also sets some parameters for the matplotlib and seaborn libraries for data visualization.\n\n## Repository Link\n\nYou can find the EDA folder in the repository at this location: [/src/eda](/src/eda)",
		"isFolder": true,
		"updated": "2025-03-07T03:38:06.954Z",
		"sidebar_position": 31,
		"sidebar_label": "eda",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src/eda",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is /src/eda\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"__init__.py\",\"path\":\"src/eda/__init__.py\",\"fileOrFolder\":\"file\",\"summary\":\"# __init__.py\\n\\n## Overview\"},{\"name\":\"data_analysis.ipynb\",\"path\":\"src/eda/data_analysis.ipynb\",\"fileOrFolder\":\"file\",\"summary\":\"# data_analysis.ipynb\\n\\n## Description\"},{\"name\":\"heuristics_cost.py\",\"path\":\"src/eda/heuristics_cost.py\",\"fileOrFolder\":\"file\",\"summary\":\"# heuristics_cost.py\\n\\n## Overview\"},{\"name\":\"viewer.ipynb\",\"path\":\"src/eda/viewer.ipynb\",\"fileOrFolder\":\"file\",\"summary\":\"# viewer.ipynb\\n\\nThis Jupyter notebook file, `viewer.ipynb`, is a Python script that imports the necessary libraries and reads a CSV file into a pandas DataFrame. It then sets some parameters for the matplotlib and seaborn libraries for data visualization. \\n\\n## Code Description\"}]\r\n###"
			}
		],
		"id": "src/eda",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src/experiments",
		"folderPath": "src/experiments",
		"fileContent": "",
		"documentation": "# Software Documentation\n\nThis documentation provides an overview of the content of the `src/experiments` folder in the system. The folder is responsible for conducting various experiments and creating datasets from existing data. It contains several Python scripts that are used for different purposes.\n\n## __init__.py\n\n[__init__.py](src/experiments/__init__.py) is a file in the `src/experiments` folder. It is a special Python file that allows a directory to become a Python package from which modules can be imported.\n\n## algorithm_exp.py\n\n[algorithm_exp.py](src/experiments/algorithm_exp.py) is a Python script used to conduct experiments on different search algorithms and heuristics. It uses the pandas library to handle data, tqdm for progress bars, and multiprocessing for parallel processing. The script imports several classes and functions from other modules.\n\n## exp_dataset.py\n\n[exp_dataset.py](src/experiments/exp_dataset.py) is a Python script used to create an experimental dataset from existing data. It uses the pandas and numpy libraries to manipulate data and the warnings library to handle warnings.\n\n## overestimation_exp.py\n\n[overestimation_exp.py](src/experiments/overestimation_exp.py) is a Python script in the `src/experiments` folder. The file's specific functionality is not detailed in the provided JSON data.\n\n## Repository Link\n\nFor more information, please visit the [repository](/src/experiments).",
		"isFolder": true,
		"updated": "2025-03-07T03:38:22.110Z",
		"sidebar_position": 32,
		"sidebar_label": "experiments",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src/experiments",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is /src/experiments\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"__init__.py\",\"path\":\"src/experiments/__init__.py\",\"fileOrFolder\":\"file\",\"summary\":\"# __init__.py\\n\\n## Overview\"},{\"name\":\"algorithm_exp.py\",\"path\":\"src/experiments/algorithm_exp.py\",\"fileOrFolder\":\"file\",\"summary\":\"# algorithm_exp.py\\n\\nThis Python script, `algorithm_exp.py`, is used to conduct experiments on different search algorithms and heuristics. It uses the pandas library to handle data, tqdm for progress bars, and multiprocessing for parallel processing. The script imports several classes and functions from other modules, including `InformedSearchAlgorithm`, `GameConfig`, `State`, `AStar`, `GBFS`, `CallableHeuristicClass`, `manhattan_distance`, `ann_distance`, `Game`, and `ResultRecord`.\\n\\n## Functions\"},{\"name\":\"exp_dataset.py\",\"path\":\"src/experiments/exp_dataset.py\",\"fileOrFolder\":\"file\",\"summary\":\"# exp_dataset.py\\n\\nThis is a Python script file named `exp_dataset.py`. The script is used to create an experimental dataset from existing data. It uses the pandas and numpy libraries to manipulate data and the warnings library to handle warnings.\\n\\n## Description\"},{\"name\":\"overestimation_exp.py\",\"path\":\"src/experiments/overestimation_exp.py\",\"fileOrFolder\":\"file\",\"summary\":\"# overestimation_exp.py\\n\\n## Overview\"}]\r\n###"
			}
		],
		"id": "src/experiments",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src/ml",
		"folderPath": "src/ml",
		"fileContent": "",
		"documentation": "# Machine Learning Module Documentation\n\nThis documentation provides an overview of the Machine Learning (ML) module in our system. The ML module is responsible for defining, training, and using machine learning models to solve puzzles. The module is implemented in Python and uses the PyTorch library for model definition, training, and inference.\n\n## Table of Contents\n\n1. [__init__.py](#__init__.py)\n2. [inferring.py](#inferring.py)\n3. [modelling.py](#modelling.py)\n4. [Repository Link](#Repository-Link)\n\n## __init__.py\n\n[__init__.py](src/ml/__init__.py) is a file in the ML module. It is responsible for initializing the module and making it a package. This allows the module's classes and functions to be imported into other parts of the system.\n\n## inferring.py\n\n[inferring.py](src/ml/inferring.py) is a Python script in the ML module. It uses PyTorch to define and use a neural network model for solving puzzles. The script contains a class definition for the model, as well as functions for loading the model, making single inferences, and making batch inferences.\n\n### PuzzleHeuristicModel Class\n\nThe PuzzleHeuristicModel class is defined in this script. It represents the neural network model used for solving puzzles.\n\n## modelling.py\n\n[modelling.py](src/ml/modelling.py) is a Python file in the ML module. It contains the implementation of a machine learning model for solving puzzles. The file includes the definition of a custom PyTorch Dataset class, a PyTorch Model class, and a training function. The code uses PyTorch for model definition, training, and inference, and pandas for data manipulation.\n\n### PuzzleDataset Class\n\nThe PuzzleDataset class is defined in this file. It represents the dataset used for training the puzzle-solving model.\n\n## Repository Link\n\nYou can find the ML module in our repository at the following link: [/src/ml](/src/ml).",
		"isFolder": true,
		"updated": "2025-03-07T03:38:39.767Z",
		"sidebar_position": 33,
		"sidebar_label": "ml",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src/ml",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is /src/ml\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"__init__.py\",\"path\":\"src/ml/__init__.py\",\"fileOrFolder\":\"file\",\"summary\":\"# __init__.py\\n\\n## Overview\"},{\"name\":\"inferring.py\",\"path\":\"src/ml/inferring.py\",\"fileOrFolder\":\"file\",\"summary\":\"# inferring.py\\n\\nThis is a Python script that uses PyTorch to define and use a neural network model for solving puzzles. The script contains a class definition for the model, as well as functions for loading the model, making single inferences, and making batch inferences.\\n\\n## PuzzleHeuristicModel Class\"},{\"name\":\"modelling.py\",\"path\":\"src/ml/modelling.py\",\"fileOrFolder\":\"file\",\"summary\":\"# modelling.py\\n\\nThis Python file contains the implementation of a machine learning model for solving puzzles. The file includes the definition of a custom PyTorch Dataset class, a PyTorch Model class, and a training function. The code uses PyTorch for model definition, training, and inference, and pandas for data manipulation.\\n\\n## PuzzleDataset Class\"}]\r\n###"
			}
		],
		"id": "src/ml",
		"lastTouch": "2025-03-07T03:28:59.267Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "src",
		"folderPath": "src",
		"fileContent": "",
		"documentation": "# Software Documentation\n\nThis documentation provides an overview of the content of the `src` folder in the system. The folder is responsible for various functionalities including game implementation, configuration, heuristics calculation, node representation, state management, utility functions, search algorithms, data analysis, experiment conduction, and machine learning model definition and training.\n\n## Table of Contents\n\n- [__init__.py](#__init__.py)\n- [game.py](#game.py)\n- [game_config.py](#game_config.py)\n- [heuristics.py](#heuristics.py)\n- [node.py](#node.py)\n- [state.py](#state.py)\n- [utils.py](#utils.py)\n- [algorithms](#algorithms)\n- [eda](#eda)\n- [experiments](#experiments)\n- [ml](#ml)\n- [Repository Link](#Repository-Link)\n\n### __init__.py\n\nThis file is responsible for initializing the Python package.\n\n### game.py\n\nThis Python file, `game.py`, is a code file that contains the implementation of a game, specifically a puzzle game. The game is designed to be solved using a search algorithm. The file contains several classes, methods, and functions that are used to define the game, its configuration, and the process of solving it.\n\n### game_config.py\n\nThis is a Python code file that defines a class `GameConfig` which is used to store the configuration of a game. The class has several attributes and methods that are used to manipulate and validate the game configuration.\n\n### heuristics.py\n\nThis Python file, `heuristics.py`, contains several classes and methods for calculating different types of distances between two states of a puzzle. These distances are used as heuristics in solving the puzzle. The file also includes a `main` function that demonstrates how to use these classes and methods.\n\n### node.py\n\nThis Python file defines two classes, `Node` and `PNode`, which represent nodes in a search tree. These nodes are used in search algorithms, such as A* and BFS, to represent the state of a problem at a given point, the action taken to reach this state, the cost of the path from the initial state to this state, and the parent node that this state was expanded from.\n\n### state.py\n\nThis Python file is responsible for managing the state of the game.\n\n### utils.py\n\nThis is a Python utility file named `utils.py`. It contains two main functions: `make_dir` and `create_scatterplot_and_save`. The file is primarily used for creating directories and generating scatter plots from a given DataFrame.\n\n### algorithms\n\nThis folder is responsible for the implementation of various search algorithms. Each file in this folder represents a different search algorithm or a related functionality.\n\n### eda\n\nThis folder is responsible for data analysis and visualization, and it contains several Python scripts and Jupyter notebook files that perform various tasks related to this.\n\n### experiments\n\nThis folder is responsible for conducting various experiments and creating datasets from existing data. It contains several Python scripts that are used for different purposes.\n\n### ml\n\nThis folder is responsible for defining, training, and using machine learning models to solve puzzles. The module is implemented in Python and uses the PyTorch library for model definition, training, and inference.\n\n## Repository Link\n\nYou can find the repository [here](/src).",
		"isFolder": true,
		"updated": "2025-03-07T03:39:04.883Z",
		"sidebar_position": 30,
		"sidebar_label": "src",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is /src\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"__init__.py\",\"path\":\"src/__init__.py\",\"fileOrFolder\":\"file\",\"summary\":\"# __init__.py\\n\\n## Overview\"},{\"name\":\"game.py\",\"path\":\"src/game.py\",\"fileOrFolder\":\"file\",\"summary\":\"# game.py\\n\\nThis Python file, `game.py`, is a code file that contains the implementation of a game, specifically a puzzle game. The game is designed to be solved using a search algorithm. The file contains several classes, methods, and functions that are used to define the game, its configuration, and the process of solving it.\\n\\n## Import Statements\"},{\"name\":\"game_config.py\",\"path\":\"src/game_config.py\",\"fileOrFolder\":\"file\",\"summary\":\"# game_config.py\\n\\nThis is a Python code file that defines a class `GameConfig` which is used to store the configuration of a game. The class has several attributes and methods that are used to manipulate and validate the game configuration.\\n\\n## Class: GameConfig\"},{\"name\":\"heuristics.py\",\"path\":\"src/heuristics.py\",\"fileOrFolder\":\"file\",\"summary\":\"# heuristics.py\\n\\nThis Python file, `heuristics.py`, contains several classes and methods for calculating different types of distances between two states of a puzzle. These distances are used as heuristics in solving the puzzle. The file also includes a `main` function that demonstrates how to use these classes and methods.\\n\\n## Classes\"},{\"name\":\"node.py\",\"path\":\"src/node.py\",\"fileOrFolder\":\"file\",\"summary\":\"# node.py\\n\\nThis Python file defines two classes, `Node` and `PNode`, which represent nodes in a search tree. These nodes are used in search algorithms, such as A* and BFS, to represent the state of a problem at a given point, the action taken to reach this state, the cost of the path from the initial state to this state, and the parent node that this state was expanded from.\\n\\n## Class: Node\"},{\"name\":\"state.py\",\"path\":\"src/state.py\",\"fileOrFolder\":\"file\",\"summary\":\"# state.py\\n\\n## Overview\"},{\"name\":\"utils.py\",\"path\":\"src/utils.py\",\"fileOrFolder\":\"file\",\"summary\":\"# utils.py\\n\\nThis is a Python utility file named `utils.py`. It contains two main functions: `make_dir` and `create_scatterplot_and_save`. The file is primarily used for creating directories and generating scatter plots from a given DataFrame.\\n\\n## Import Statements\"},{\"name\":\"algorithms\",\"path\":\"src/algorithms\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation for src/algorithms Folder\\n\\nThis folder is responsible for the implementation of various search algorithms. Each file in this folder represents a different search algorithm or a related functionality. \\n\\n## Table of Contents\"},{\"name\":\"eda\",\"path\":\"src/eda\",\"fileOrFolder\":\"folder\",\"summary\":\"# Exploratory Data Analysis (EDA) Folder Documentation\\n\\nThis documentation provides an overview of the content and functionality of the Exploratory Data Analysis (EDA) folder in the system. The EDA folder is responsible for data analysis and visualization, and it contains several Python scripts and Jupyter notebook files that perform various tasks related to this.\\n\\n## Table of Contents\"},{\"name\":\"experiments\",\"path\":\"src/experiments\",\"fileOrFolder\":\"folder\",\"summary\":\"# Software Documentation\\n\\nThis documentation provides an overview of the content of the `src/experiments` folder in the system. The folder is responsible for conducting various experiments and creating datasets from existing data. It contains several Python scripts that are used for different purposes.\\n\\n## __init__.py\"},{\"name\":\"ml\",\"path\":\"src/ml\",\"fileOrFolder\":\"folder\",\"summary\":\"# Machine Learning Module Documentation\\n\\nThis documentation provides an overview of the Machine Learning (ML) module in our system. The ML module is responsible for defining, training, and using machine learning models to solve puzzles. The module is implemented in Python and uses the PyTorch library for model definition, training, and inference.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src",
		"lastTouch": "2025-03-07T03:39:04.883Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "README",
		"path": "README.md",
		"folderPath": "",
		"fileContent": "# 8-puzzle\r\n\r\n Capstone Project for the Introduction to Artificial Intelligence course\r\n\r\n## Download dataset\r\n\r\n[Link](https://drive.google.com/uc?export=download&id=1sAhDL847ku-mo3C-LyMCb5-QYdAta8HQ)\r\n\r\nAfter downloading, you get a file named `fifteen-puzzle-6M.csv`. Navigate to the `data/input/` folder and put the file there.\r\n\r\n## What can you do?\r\n\r\n```default\r\nusage: main.py [-h] (--evaluate_heuristics_on_dataset | --train | --make_exp_dataset | --exp1 | --exp2 | --game) \r\n               [--input_file_path INPUT_FILE_PATH] [--exp_file_path EXP_FILE_PATH] \r\n               [--eda_folder_dir EDA_FOLDER_DIR] [--exp_folder_dir EXP_FOLDER_DIR] [--save_model_dir SAVE_MODEL_DIR] \r\n               [--run_name RUN_NAME] \r\n               [--n N]\r\n               [--should_stratify] \r\n               [--board BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD]\r\n\r\nRun game or evaluate heuristics.\r\n\r\noptions:\r\n  -h, --help            show this help message and exit\r\n  --evaluate_heuristics_on_dataset\r\n                        Evaluate heuristics on the dataset.\r\n  --train               Train a model for calculating puzzle cost.\r\n  --make_exp_dataset    Make an experimental dataset for Experiment 2.\r\n  --exp1                Conduct the first experiment.\r\n  --exp2                Conduct the second experiment.\r\n  --game                Play a game.\r\n  --input_file_path INPUT_FILE_PATH\r\n                        Path to the input file.\r\n  --exp_file_path EXP_FILE_PATH\r\n                        Path to the experiment data file.\r\n  --eda_folder_dir EDA_FOLDER_DIR\r\n                        Path to the EDA folder.\r\n  --exp_folder_dir EXP_FOLDER_DIR\r\n                        Path to the experiments folder.\r\n  --save_model_dir SAVE_MODEL_DIR\r\n                        Path to the model folder.\r\n  --run_name RUN_NAME   Name of the run.\r\n  --n N                 If n = 0, load all data, if n > 0, load n first rows from data.\r\n  --should_stratify     Split the data in a stratified manner.\r\n  --board BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD BOARD\r\n                        A list of 16 integers from 0 to 15, shuffled.\r\n```\r\n\r\nSuggested runs:\r\n\r\n`--evaluate_heuristics_on_dataset`:\r\n\r\n```bash\r\npython main.py --evaluate_heuristics_on_dataset\r\n```\r\n\r\n`--train`:\r\n\r\n```bash\r\npython main.py --train --run_name run0 --should_stratify\r\n```\r\n\r\nAfter you run the training, you may want to copy the `.pth` file from `data/models/[YOUR_RUN_NAME]/immediate/` folder to `data/models/`.\r\nExperiments may fail if you do not do this.\r\nWe have provided a sample trained model weights `puzzle_model.pth` at `data/input/`. Copy to `data/models/`.\r\n\r\n`--make_exp_dataset`:\r\n\r\n```bash\r\npython main.py --make_exp_dataset \r\n```\r\n\r\n`--exp1`:\r\n\r\n```bash\r\npython main.py --exp1\r\n```\r\n\r\n`--exp2`:\r\n\r\n```bash\r\npython main.py --exp2\r\n```\r\n\r\n`--game`:\r\n\r\n```bash\r\npython main.py --game --board 1 2 3 4 5 6 7 8 9 10 11 12 13 14 0 15\r\n```\r\n\r\nSometimes, some variables are not exposed through this user interface. You may want to change them in the code files.\r\n",
		"documentation": "# Project Title\n\n## Description\nThis project is a game that allows users to evaluate heuristics, train models, conduct experiments, and play a game. The game uses the A* algorithm and various heuristics to solve puzzles. The project also includes functionality for conducting experiments and training models for calculating puzzle cost.\n\n## Getting Started\nTo get started with this project, you will need to install the npm package and run it with npx. \n\n```bash\nnpm install\nnpx <package-name>\n```\n\n## Usage\nThe configuration is optional and will be generated on the first run. The project includes several tasks that can be run, including evaluating heuristics on a dataset, training a model, making an experimental dataset, conducting experiments, and playing a game. \n\n## Reporting Bugs\nIf you encounter any bugs or issues with the project, please report them to the project's repository.\n\n## Versioning\nThe project uses semantic versioning. For the versions available, see the tags on this repository.\n\n## Authors\nPlease see the list of contributors who participated in this project.\n\n## License\nThis project is licensed under the MIT License - see the LICENSE.md file for details.",
		"isFolder": false,
		"updated": "2025-03-07T03:39:15.068Z",
		"sidebar_position": 1,
		"sidebar_label": "README",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Create a \"ReadMe\" guide for the project, named \"\".\r\nInclude the following:\r\nTitle, Description,\r\nGetting Started by installing npm package, how to run it with npx\r\nConfiguration is optional and will be generated on first run\r\nReporting bugs, repository and homepage\r\nVersioning\r\nAuthors\r\nLicense\r\n\r\nThis is the entry file:\r\n###\r\nimport argparse\r\n\r\nfrom src.eda import evaluate_heuristics_on_dataset\r\nfrom src.algorithms import AStar\r\nfrom src.state import State\r\nfrom src.game_config import GameConfig\r\nfrom src.game import Game\r\nfrom src.heuristics import manhattan_distance, ann_distance\r\nfrom src.ml import train\r\nfrom src.experiments import (\r\n    conduct_overestimation_experiment,\r\n    make_exp_dataset,\r\n    conduct_algorithm_experiment,\r\n)\r\n\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser(description=\"Run game or evaluate heuristics.\")\r\n\r\n    tasks = parser.add_mutually_exclusive_group(required=True)\r\n\r\n    tasks.add_argument(\r\n        \"--evaluate_heuristics_on_dataset\",\r\n        action=\"store_true\",\r\n        help=\"Evaluate heuristics on the dataset.\",\r\n    )\r\n\r\n    tasks.add_argument(\r\n        \"--train\",\r\n        action=\"store_true\",\r\n        help=\"Train a model for calculating puzzle cost.\",\r\n    )\r\n\r\n    tasks.add_argument(\r\n        \"--make_exp_dataset\",\r\n        action=\"store_true\",\r\n        help=\"Make an experimental dataset for Experiment 2.\",\r\n    )\r\n\r\n    tasks.add_argument(\r\n        \"--exp1\",\r\n        action=\"store_true\",\r\n        help=\"Conduct the first experiment.\",\r\n    )\r\n\r\n    tasks.add_argument(\r\n        \"--exp2\",\r\n        action=\"store_true\",\r\n        help=\"Conduct the second experiment.\",\r\n    )\r\n\r\n    tasks.add_argument(\r\n        \"--game\",\r\n        action=\"store_true\",\r\n        help=\"Play a game.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--input_file_path\",\r\n        type=str,\r\n        default=\"data/input/fifteen-puzzle-6M.csv\",\r\n        help=\"Path to the input file.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--exp_file_path\",\r\n        type=str,\r\n        default=\"data/input/experimental_data.csv\",\r\n        help=\"Path to the experiment data file.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--eda_folder_dir\",\r\n        type=str,\r\n        default=\"data/eda/\",\r\n        help=\"Path to the EDA folder.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--exp_folder_dir\",\r\n        type=str,\r\n        default=\"data/experiments/\",\r\n        help=\"Path to the experiments folder.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--save_model_dir\",\r\n        type=str,\r\n        default=\"data/models/\",\r\n        help=\"Path to the model folder.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--run_name\",\r\n        type=str,\r\n        default=\"run_0\",\r\n        help=\"Name of the run.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--n\",\r\n        type=int,\r\n        default=0,\r\n        help=\"If n = 0, load all data, if n > 0, load n first rows from data.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--should_stratify\",\r\n        action=\"store_true\",\r\n        help=\"Split the data in a stratified manner.\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"--board\",\r\n        nargs=16,\r\n        type=int,\r\n        default=[12, 0, 15, 2, 8, 4, 3, 5, 6, 14, 1, 11, 10, 7, 9, 13],\r\n        help=\"A list of 16 integers from 0 to 15, shuffled.\",\r\n    )\r\n\r\n    args = parser.parse_args()\r\n\r\n    if args.evaluate_heuristics_on_dataset:\r\n        evaluate_heuristics_on_dataset(\r\n            input_file_path=args.input_file_path,\r\n            eda_folder_dir=args.eda_folder_dir,\r\n            n=args.n,\r\n        )\r\n\r\n    if args.train:\r\n        train(\r\n            input_file_path=args.input_file_path,\r\n            save_model_dir=args.save_model_dir,\r\n            n=args.n,\r\n            run_name=args.run_name,\r\n            should_stratify=args.should_stratify,\r\n        )\r\n\r\n    if args.make_exp_dataset:\r\n        make_exp_dataset()\r\n\r\n    if args.exp1:\r\n        conduct_overestimation_experiment(\r\n            input_file_path=args.input_file_path,\r\n            experiment_folder_path=args.exp_folder_dir,\r\n            n=args.n,\r\n        )\r\n\r\n    if args.exp2:\r\n        conduct_algorithm_experiment(\r\n            experiment_data_path=args.exp_file_path,\r\n            experiment_folder_path=args.exp_folder_dir,\r\n            n=args.n,\r\n        )\r\n\r\n    if args.game:\r\n        start_board = args.board\r\n\r\n        game_config = GameConfig(\r\n            start_state=State(*start_board),\r\n        )\r\n        algorithm = AStar(heuristic=manhattan_distance)\r\n        g = Game(game_config=game_config, algorithm=algorithm, ignore_solvability=False)\r\n\r\n        g.play(do_print=True)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed README file for the project . \n            Include the sections Title, Description with link to homepage (add paragraphs), Getting started, Usage, Repository link, Documentation, Report Issues, Authors, Version, License. If you do not have data for section then DO NOT create that section."
			}
		],
		"id": "README.md",
		"lastTouch": "2025-03-07T03:39:15.068Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "HowTo Example",
		"path": "howto/howto_create_howto.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Add a HowTo in Config File\n\n## Introduction\nThis guide will walk you through the process of adding a HowTo in a config file. This involves using the `args` property to inject properties into a liquid template and the `file` property to append the extracted content of a file to a liquid template. \n\n## Step-by-Step Instructions\n\n1. **Understand the `args` property**: The `args` property is used to inject properties into a liquid template. Any property set in `args` can be accessed in the liquid template.\n\n2. **Understand the `file` property**: The `file` property appends the extracted content of a file to a liquid template. This is done using JSONPath or the `extract` property that uses LLM to extract content from the file.\n\n3. **Create a liquid template**: Developers must create a liquid template in the `.code-narrator/gpt_questions` directory. This template file is used to ask GPT questions.\n\n:::note\nRemember to replace any secret information with ***** to maintain security.\n:::\n\nBy following these steps, developers can successfully add a HowTo in a config file.",
		"isFolder": false,
		"updated": "2025-03-07T03:39:23.675Z",
		"sidebar_position": 12,
		"sidebar_label": "HowTo Example",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Show how developer would add HowTo in config file,\r\nargs property is used to inject properties into liquid template, any property set in args can be access in liquid template with \r\nfile property appends extracted content of a file to liquid template, using JSONPath or the extract property that uses LLM to extract content from file\r\nDevelopers MUST create a liquid template in .code-narrator/gpt_questions, this template file is used to ask GPT question"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			}
		],
		"id": "howto/howto_create_howto.md",
		"lastTouch": "2025-03-07T03:39:23.675Z",
		"data": {
			"parent": "HowTo Overview"
		}
	},
	{
		"name": "HowTo Overview",
		"path": "howto/overview_readme.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# HowTo Example\n\nThis guide provides a step-by-step process on how to add a HowTo in a configuration file. It involves the use of the `args` property for injecting properties into a liquid template and the `file` property for appending the extracted content of a file to a liquid template.",
		"isFolder": false,
		"updated": "2025-03-07T03:39:27.530Z",
		"sidebar_position": 11,
		"sidebar_label": "HowTo Overview",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give title and short description that this is an overview file for files located in directory\r\nGive short description of each file that is provided\r\nAdd link to each file, link should be the filename\r\n\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed README file for the project . \n            Include the sections Title, Description with link to homepage (add paragraphs), Getting started, Usage, Repository link, Documentation, Report Issues, Authors, Version, License. If you do not have data for section then DO NOT create that section."
			},
			{
				"role": "assistant",
				"content": "\n### 1st paragraph of \"HowTo Example\" ###\nThis guide will walk you through the process of adding a HowTo in a config file. This involves using the `args` property to inject properties into a liquid template and the `file` property to append the extracted content of a file to a liquid template. \n### file ends ###\n                         "
			}
		],
		"id": "howto/overview_readme.md",
		"lastTouch": "2025-03-07T03:39:27.530Z",
		"data": {
			"has_children": true
		}
	}
]